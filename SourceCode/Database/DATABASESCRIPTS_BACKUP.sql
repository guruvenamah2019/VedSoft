/*
SQLyog Community
MySQL - 8.0.19 : Database - ved_soft_db
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
/*Table structure for table `ACADEMIC_YEARS` */

DROP TABLE IF EXISTS `ACADEMIC_YEARS`;

CREATE TABLE `ACADEMIC_YEARS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `ACADEMIC_YEAR` varchar(50) DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `ADMISSION_TYPE` */

DROP TABLE IF EXISTS `ADMISSION_TYPE`;

CREATE TABLE `ADMISSION_TYPE` (
  `ID` int NOT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `BANK` */

DROP TABLE IF EXISTS `BANK`;

CREATE TABLE `BANK` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(150) DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `BRANCH_BATCHES` */

DROP TABLE IF EXISTS `BRANCH_BATCHES`;

CREATE TABLE `BRANCH_BATCHES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BRANCH_ID` int DEFAULT NULL,
  `ACADEMIC_YEAR_ID` int DEFAULT NULL,
  `START_DATE` datetime DEFAULT NULL,
  `END_DATE` datetime DEFAULT NULL,
  `START_TIME` int DEFAULT NULL,
  `END_TIME` int DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `BRANCH_BATCHES_FK2` (`BRANCH_ID`),
  CONSTRAINT `BRANCH_BATCHES_FK2` FOREIGN KEY (`BRANCH_ID`) REFERENCES `CUSTOMER_BRANCHES` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `BRANCH_BATCH_STUDENTS` */

DROP TABLE IF EXISTS `BRANCH_BATCH_STUDENTS`;

CREATE TABLE `BRANCH_BATCH_STUDENTS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BRANCH_BATCHES_ID` int DEFAULT NULL,
  `STUDENT_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `BRANCH_BATCH_SUBJECTS` (`BRANCH_BATCHES_ID`),
  CONSTRAINT `BRANCH_BATCH_STUDENTS_ID_FK2` FOREIGN KEY (`BRANCH_BATCHES_ID`) REFERENCES `BRANCH_BATCHES` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `BRANCH_BATCH_SUBJECTS` */

DROP TABLE IF EXISTS `BRANCH_BATCH_SUBJECTS`;

CREATE TABLE `BRANCH_BATCH_SUBJECTS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BRANCH_BATCHES_ID` int DEFAULT NULL,
  `CUSTOMER_COURSE_SUBJECT_MAPPING_ID` int DEFAULT NULL,
  `FACULTY_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `BRANCH_BATCH_SUBJECTS` (`BRANCH_BATCHES_ID`),
  CONSTRAINT `BRANCH_BATCHES_ID_FK2` FOREIGN KEY (`BRANCH_BATCHES_ID`) REFERENCES `BRANCH_BATCHES` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `BRANCH_COURSES` */

DROP TABLE IF EXISTS `BRANCH_COURSES`;

CREATE TABLE `BRANCH_COURSES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CUSTOMER_COURSES_ID` varchar(250) DEFAULT NULL,
  `BRANCH_ID` int DEFAULT NULL,
  `ACADEMIC_YEAR_ID` int DEFAULT NULL,
  `DURATION_UOM` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `COST` decimal(10,0) DEFAULT NULL,
  `DURATION` varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `BRANCH_COURSES_FK2` (`BRANCH_ID`),
  CONSTRAINT `BRANCH_COURSES_FK2` FOREIGN KEY (`BRANCH_ID`) REFERENCES `CUSTOMER_BRANCHES` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `COURSE_FEE_STRUCTURE` */

DROP TABLE IF EXISTS `COURSE_FEE_STRUCTURE`;

CREATE TABLE `COURSE_FEE_STRUCTURE` (
  `ID` int NOT NULL,
  `BRANCH_COURSE_ID` int DEFAULT NULL,
  `FEE_TYPE_ID` int DEFAULT NULL,
  `FEE_AMOUNT` decimal(10,0) DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `COURSE_FEE_STRUCTURE_FK1` (`BRANCH_COURSE_ID`),
  CONSTRAINT `COURSE_FEE_STRUCTURE_FK1` FOREIGN KEY (`BRANCH_COURSE_ID`) REFERENCES `BRANCH_COURSES` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_BRANCHES` */

DROP TABLE IF EXISTS `CUSTOMER_BRANCHES`;

CREATE TABLE `CUSTOMER_BRANCHES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` int DEFAULT NULL,
  `CODE` varchar(150) NOT NULL,
  `NAME` varchar(250) NOT NULL,
  `ACTIVE` int NOT NULL,
  `CONTACT_NO` json DEFAULT NULL,
  `ADDRESS` json DEFAULT NULL,
  `OTHER_INFO` json DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `CODE` (`CODE`),
  UNIQUE KEY `NAME` (`NAME`),
  KEY `BRANCH_MASTER_FK` (`CUSTOMER_ID`),
  CONSTRAINT `BRANCH_MASTER_FK` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_COURSES` */

DROP TABLE IF EXISTS `CUSTOMER_COURSES`;

CREATE TABLE `CUSTOMER_COURSES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `ACTIVE` int unsigned DEFAULT '1',
  `VEDIC_COURSE_ID` int DEFAULT NULL,
  `COURSE_TYPE_ID` int DEFAULT NULL,
  `COURSE_DESCRIPTION` varchar(250) DEFAULT NULL,
  `DURATION` int DEFAULT NULL,
  `DURATION_UOM` varchar(50) DEFAULT NULL,
  `COURSE_COST` decimal(10,0) DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `CUSTOMER_COURSES_FK1` (`VEDIC_COURSE_ID`),
  KEY `CUSTOMER_COURSES_FK2` (`CUSTOMER_ID`),
  CONSTRAINT `CUSTOMER_COURSES_FK1` FOREIGN KEY (`VEDIC_COURSE_ID`) REFERENCES `VEDIC_COURSES_MASTER` (`ID`),
  CONSTRAINT `CUSTOMER_COURSES_FK2` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_COURSE_SUBJECT_MAPPING` */

DROP TABLE IF EXISTS `CUSTOMER_COURSE_SUBJECT_MAPPING`;

CREATE TABLE `CUSTOMER_COURSE_SUBJECT_MAPPING` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` int NOT NULL,
  `CUSTOMER_COURSE_ID` int NOT NULL,
  `CUSTOMER_SUBJECT_HIERACHY_ID` int NOT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `CUSTOMER_COURSE_HIERACHY_MAPPING_FK1` (`CUSTOMER_SUBJECT_HIERACHY_ID`),
  KEY `CUSTOMER_COURSE_HIERACHY_MAPPING_FK2` (`CUSTOMER_COURSE_ID`),
  KEY `CUSTOMER_COURSE_HIERACHY_MAPPING_FK3` (`CUSTOMER_ID`),
  CONSTRAINT `CUSTOMER_COURSE_HIERACHY_MAPPING_FK1` FOREIGN KEY (`CUSTOMER_SUBJECT_HIERACHY_ID`) REFERENCES `CUSTOMER_SUBJECT_HIRARCHY` (`ID`),
  CONSTRAINT `CUSTOMER_COURSE_HIERACHY_MAPPING_FK2` FOREIGN KEY (`CUSTOMER_COURSE_ID`) REFERENCES `CUSTOMER_COURSES` (`ID`),
  CONSTRAINT `CUSTOMER_COURSE_HIERACHY_MAPPING_FK3` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_EDUCATIONAL_INSTITUTIONS` */

DROP TABLE IF EXISTS `CUSTOMER_EDUCATIONAL_INSTITUTIONS`;

CREATE TABLE `CUSTOMER_EDUCATIONAL_INSTITUTIONS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `INSTITUTION_TYPE_ID` int DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `NAME` varchar(250) DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `CUSTOMER_EDUC_INSTITUTION_FK1` (`INSTITUTION_TYPE_ID`),
  KEY `CUSTOMER_EDUC_INSTITUTION_FK2` (`CUSTOMER_ID`),
  CONSTRAINT `CUSTOMER_EDUC_INSTITUTION_FK1` FOREIGN KEY (`INSTITUTION_TYPE_ID`) REFERENCES `VEDIC_INSTITUTION_TYPE` (`ID`),
  CONSTRAINT `CUSTOMER_EDUC_INSTITUTION_FK2` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_FEE_TYPES` */

DROP TABLE IF EXISTS `CUSTOMER_FEE_TYPES`;

CREATE TABLE `CUSTOMER_FEE_TYPES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(100) DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_MASTER` */

DROP TABLE IF EXISTS `CUSTOMER_MASTER`;

CREATE TABLE `CUSTOMER_MASTER` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CODE` varchar(150) NOT NULL,
  `NAME` varchar(250) NOT NULL,
  `SUB_DOMAIN` varchar(100) NOT NULL,
  `DESCRIPTION` varchar(150) DEFAULT NULL,
  `ACTIVE` int NOT NULL,
  `CONTACT_NO` json DEFAULT NULL,
  `ADDRESS` json DEFAULT NULL,
  `OTHER_INFO` json DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `CODE` (`CODE`),
  UNIQUE KEY `NAME` (`NAME`),
  UNIQUE KEY `SUB_DOMAIN` (`SUB_DOMAIN`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_ROLES` */

DROP TABLE IF EXISTS `CUSTOMER_ROLES`;

CREATE TABLE `CUSTOMER_ROLES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  `DESCRIPTION` varchar(250) DEFAULT NULL,
  `CUSTOMER_ID` int NOT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `CUSTOMER_ROLES_FK1` (`CUSTOMER_ID`),
  CONSTRAINT `CUSTOMER_ROLES_FK1` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_ROLE_MODULE_PRIVILEGES` */

DROP TABLE IF EXISTS `CUSTOMER_ROLE_MODULE_PRIVILEGES`;

CREATE TABLE `CUSTOMER_ROLE_MODULE_PRIVILEGES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ROLE_ID` int DEFAULT NULL,
  `MODULE_PRIVILEGE_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `CUSTOMER_ROLE_MODULE_PRIVILEGES_FK1` (`CUSTOMER_ROLE_ID`),
  KEY `CUSTOMER_ROLE_MODULE_PRIVILEGES_FK2` (`MODULE_PRIVILEGE_ID`),
  CONSTRAINT `CUSTOMER_ROLE_MODULE_PRIVILEGES_ibfk_1` FOREIGN KEY (`CUSTOMER_ROLE_ID`) REFERENCES `CUSTOMER_ROLES` (`ID`),
  CONSTRAINT `CUSTOMER_ROLE_MODULE_PRIVILEGES_ibfk_2` FOREIGN KEY (`MODULE_PRIVILEGE_ID`) REFERENCES `MODULE_PRIVILEGES` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_ROLE_PRIVILEGES` */

DROP TABLE IF EXISTS `CUSTOMER_ROLE_PRIVILEGES`;

CREATE TABLE `CUSTOMER_ROLE_PRIVILEGES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `CUSTOMER_ID` int DEFAULT NULL,
  `CUSTOMER_ROLE_ID` int DEFAULT NULL,
  `PRIVILEGE_TYPE_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `CUSTOMER_ROLES_FK1` (`CUSTOMER_ROLE_ID`),
  CONSTRAINT `CUSTOMER_ROLE_PRIVILEGES_ibfk_1` FOREIGN KEY (`CUSTOMER_ROLE_ID`) REFERENCES `CUSTOMER_ROLES` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `CUSTOMER_SUBJECT_HIRARCHY` */

DROP TABLE IF EXISTS `CUSTOMER_SUBJECT_HIRARCHY`;

CREATE TABLE `CUSTOMER_SUBJECT_HIRARCHY` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `PARENT_ID` int DEFAULT NULL,
  `HIERACHY_LEVEL` int DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `COURSES_STRUCTURE_HIERACHY_FK` (`PARENT_ID`),
  KEY `CUSTOMER_COURSE_HIERACHY_FK2` (`CUSTOMER_ID`),
  CONSTRAINT `COURSES_STRUCTURE_HIERACHY_FK` FOREIGN KEY (`PARENT_ID`) REFERENCES `CUSTOMER_SUBJECT_HIRARCHY` (`ID`),
  CONSTRAINT `CUSTOMER_COURSE_HIERACHY_FK2` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `DEPARTMENT` */

DROP TABLE IF EXISTS `DEPARTMENT`;

CREATE TABLE `DEPARTMENT` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BRANCH_ID` int DEFAULT NULL,
  `NAME` varchar(250) DEFAULT NULL,
  `DESCRIPTION` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `DEPARTMENT_FK` (`BRANCH_ID`),
  CONSTRAINT `DEPARTMENT_FK` FOREIGN KEY (`BRANCH_ID`) REFERENCES `CUSTOMER_BRANCHES` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `JAI_MAA_BHAWANI` */

DROP TABLE IF EXISTS `JAI_MAA_BHAWANI`;

CREATE TABLE `JAI_MAA_BHAWANI` (
  `DESCRIPTION` varchar(2000) DEFAULT NULL,
  `CREATEDDATE` datetime DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `LANGUAGE_MASTER` */

DROP TABLE IF EXISTS `LANGUAGE_MASTER`;

CREATE TABLE `LANGUAGE_MASTER` (
  `ID` int NOT NULL,
  `NAME` varchar(50) DEFAULT NULL,
  `CULTURE_CODE` varchar(5) DEFAULT NULL,
  `ACTIVE` tinyint(1) DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `LOGIN_KEY_GENERATION` */

DROP TABLE IF EXISTS `LOGIN_KEY_GENERATION`;

CREATE TABLE `LOGIN_KEY_GENERATION` (
  `LOGIN_ID` int NOT NULL AUTO_INCREMENT,
  `LOGIN_PREFIX` varchar(4) DEFAULT NULL,
  PRIMARY KEY (`LOGIN_ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `MODULE_MASTER` */

DROP TABLE IF EXISTS `MODULE_MASTER`;

CREATE TABLE `MODULE_MASTER` (
  `ID` int NOT NULL,
  `CODE` varchar(50) DEFAULT NULL,
  `NAME` varchar(100) DEFAULT NULL,
  `DESCRIPTION` varchar(250) DEFAULT NULL,
  `PARENT_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `MODULE_PRIVILEGES` */

DROP TABLE IF EXISTS `MODULE_PRIVILEGES`;

CREATE TABLE `MODULE_PRIVILEGES` (
  `ID` int NOT NULL,
  `MODULE_ID` int DEFAULT NULL,
  `PRIVILEGE_TYPE_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT '1',
  `CREATED_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `PRIVILEGE_TYPE` */

DROP TABLE IF EXISTS `PRIVILEGE_TYPE`;

CREATE TABLE `PRIVILEGE_TYPE` (
  `ID` int NOT NULL,
  `NAME` varchar(100) NOT NULL,
  `ACTIVE` int NOT NULL DEFAULT '1',
  `DESCRIPTION` varchar(250) DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT` */

DROP TABLE IF EXISTS `STUDENT`;

CREATE TABLE `STUDENT` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `BIOMETRIC_ID` varchar(100) DEFAULT NULL,
  `ROLL_NO` int NOT NULL,
  `USER_ID` int DEFAULT NULL,
  `GUARDIAN_USER_ID` int DEFAULT NULL,
  `IS_ENROLLED` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_FK1` (`USER_ID`),
  CONSTRAINT `STUDENT_FK1` FOREIGN KEY (`USER_ID`) REFERENCES `USER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT_ADMISSION_DETAILS` */

DROP TABLE IF EXISTS `STUDENT_ADMISSION_DETAILS`;

CREATE TABLE `STUDENT_ADMISSION_DETAILS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `STUDENT_ID` int DEFAULT NULL,
  `BRANCH_ID` int DEFAULT NULL,
  `ACADEMIC_YEARID` int DEFAULT NULL,
  `DATE_OF_ADMISSION` date DEFAULT NULL,
  `ADMISSION_TYPEID` int DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` date DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_ADMISSION_DETAILS_FK1` (`STUDENT_ID`),
  KEY `STUDENT_ADMISSION_DETAILS_FK2` (`BRANCH_ID`),
  KEY `STUDENT_ADMISSION_DETAILS_FK3` (`ADMISSION_TYPEID`),
  KEY `STUDENT_ADMISSION_DETAILS_FK4` (`ACADEMIC_YEARID`),
  CONSTRAINT `STUDENT_ADMISSION_DETAILS_FK1` FOREIGN KEY (`STUDENT_ID`) REFERENCES `STUDENT` (`ID`),
  CONSTRAINT `STUDENT_ADMISSION_DETAILS_FK2` FOREIGN KEY (`BRANCH_ID`) REFERENCES `CUSTOMER_BRANCHES` (`ID`),
  CONSTRAINT `STUDENT_ADMISSION_DETAILS_FK3` FOREIGN KEY (`ADMISSION_TYPEID`) REFERENCES `ADMISSION_TYPE` (`ID`),
  CONSTRAINT `STUDENT_ADMISSION_DETAILS_FK4` FOREIGN KEY (`ACADEMIC_YEARID`) REFERENCES `ACADEMIC_YEARS` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT_BRANCHES` */

DROP TABLE IF EXISTS `STUDENT_BRANCHES`;

CREATE TABLE `STUDENT_BRANCHES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `STUDENT_ID` int DEFAULT NULL,
  `BRANCH_ID` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_BRANCHES_FK1` (`STUDENT_ID`),
  KEY `STUDENT_BRANCHES_FK2` (`BRANCH_ID`),
  CONSTRAINT `STUDENT_BRANCHES_FK1` FOREIGN KEY (`STUDENT_ID`) REFERENCES `STUDENT` (`ID`),
  CONSTRAINT `STUDENT_BRANCHES_FK2` FOREIGN KEY (`BRANCH_ID`) REFERENCES `CUSTOMER_BRANCHES` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT_COURSES` */

DROP TABLE IF EXISTS `STUDENT_COURSES`;

CREATE TABLE `STUDENT_COURSES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `STUDENT_ID` int DEFAULT NULL,
  `STUDENT_ADMISSION_DTL_ID` int DEFAULT NULL,
  `BRANCH_COURSES_ID` int DEFAULT NULL,
  `COURSE_FEE_AMOUNT` decimal(10,0) DEFAULT NULL,
  `DISCOUNT_ALLOWED` decimal(11,0) DEFAULT NULL,
  `DISCOUNTED_FEE_AMOUNT` decimal(10,0) DEFAULT NULL,
  `TOTAL_PAID_AMOUNT` decimal(10,0) DEFAULT NULL,
  `ADDITIONAL_FEES` decimal(10,0) DEFAULT NULL,
  `INSTALLMENT_TYPE` int DEFAULT NULL,
  `INSTALLMENT_START_DATE` datetime DEFAULT NULL,
  `NO_OF_INSTALLMENT` int DEFAULT NULL,
  `REMARKS` varchar(500) DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_COURSES_FK1` (`STUDENT_ID`),
  KEY `STUDENT_COURSES_FK2` (`BRANCH_COURSES_ID`),
  KEY `STUDENT_COURSE_FK3` (`STUDENT_ADMISSION_DTL_ID`),
  CONSTRAINT `STUDENT_COURSE_FK3` FOREIGN KEY (`STUDENT_ADMISSION_DTL_ID`) REFERENCES `STUDENT_ADMISSION_DETAILS` (`ID`),
  CONSTRAINT `STUDENT_COURSES_FK1` FOREIGN KEY (`STUDENT_ID`) REFERENCES `STUDENT` (`ID`),
  CONSTRAINT `STUDENT_COURSES_FK2` FOREIGN KEY (`BRANCH_COURSES_ID`) REFERENCES `BRANCH_COURSES` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT_DETAILS` */

DROP TABLE IF EXISTS `STUDENT_DETAILS`;

CREATE TABLE `STUDENT_DETAILS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `STUDENT_ID` int DEFAULT NULL,
  `ACADEMIC_INSTITUE_ID` int DEFAULT NULL,
  `STUDENT_IMAGE_PATH` varchar(150) DEFAULT NULL,
  `FATHER_FIRST_NAME` varchar(150) DEFAULT NULL,
  `FATHER_MIDDLE_NAME` varchar(150) DEFAULT NULL,
  `FATHER_LAST_NAME` varchar(150) DEFAULT NULL,
  `FATHER_CONTACTNO` varchar(50) DEFAULT NULL,
  `FATHER_ANUAL_INCOME` decimal(10,0) DEFAULT NULL,
  `FATHER_QUALIFICATION` varchar(150) DEFAULT NULL,
  `FATHER_OCCUPATION` varchar(100) DEFAULT NULL,
  `MOTHER_FIRST_NAME` varchar(150) DEFAULT NULL,
  `MOTHER_MIDDLE_NAME` varchar(150) DEFAULT NULL,
  `MOTHER_LAST_NAME` varchar(150) DEFAULT NULL,
  `MOTHER_QUALIFICATION` varchar(150) DEFAULT NULL,
  `MOTHER_OCCUPATION` varchar(100) DEFAULT NULL,
  `MOTHER_CONTACTNO` varchar(50) DEFAULT NULL,
  `MOTHER_ANUAL_INCOME` decimal(10,0) DEFAULT NULL,
  `DATE_OF_BIRTH` datetime DEFAULT NULL,
  `STUDENT_QUALIFICATION` varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_DETAILS_FK1` (`STUDENT_ID`),
  CONSTRAINT `STUDENT_DETAILS_FK1` FOREIGN KEY (`STUDENT_ID`) REFERENCES `STUDENT` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=16 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT_FEE_STRUCTURE` */

DROP TABLE IF EXISTS `STUDENT_FEE_STRUCTURE`;

CREATE TABLE `STUDENT_FEE_STRUCTURE` (
  `ID` int NOT NULL,
  `STUDENT_COURSE_ID` int DEFAULT NULL,
  `FEE_TYPE_ID` int DEFAULT NULL,
  `FEE_AMOUNT` decimal(10,0) DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_FEE_STRUCTURE_FK1` (`STUDENT_COURSE_ID`),
  CONSTRAINT `STUDENT_FEE_STRUCTURE_FK1` FOREIGN KEY (`STUDENT_COURSE_ID`) REFERENCES `CUSTOMER_FEE_TYPES` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `STUDENT_PAYMENT_DETAILS` */

DROP TABLE IF EXISTS `STUDENT_PAYMENT_DETAILS`;

CREATE TABLE `STUDENT_PAYMENT_DETAILS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `STUDENT_COURSE_ID` int DEFAULT NULL,
  `PAYMENT_AMOUNT` decimal(10,0) DEFAULT NULL,
  `PAYMENT_STATUS` int DEFAULT NULL,
  `CHEQUE_SCAN_IMAGE` varchar(150) DEFAULT NULL,
  `CHEQUE_NUMBER` varchar(100) DEFAULT NULL,
  `PAYMENT_MODE` varchar(30) DEFAULT NULL,
  `REMARKS` varchar(1000) DEFAULT NULL,
  `RECEIVER` varchar(100) DEFAULT NULL,
  `PAYMENT_DATE` datetime DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `STUDENT_PAYMENT_DETAILS_FK1` (`STUDENT_COURSE_ID`),
  CONSTRAINT `STUDENT_PAYMENT_DETAILS_FK1` FOREIGN KEY (`STUDENT_COURSE_ID`) REFERENCES `STUDENT_COURSES` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `USER_DETAILS` */

DROP TABLE IF EXISTS `USER_DETAILS`;

CREATE TABLE `USER_DETAILS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `USER_ID` int NOT NULL,
  `PASSWORD_EXPIRATION_DATE` datetime DEFAULT NULL,
  `LANGUAGE_ID` int DEFAULT NULL,
  `PAGE_SIZE` int DEFAULT NULL,
  `PWD_VALIDATION_CODE` varchar(100) DEFAULT NULL,
  `IS_TEMPORARYPASSWORD` int DEFAULT NULL,
  `LAST_LOGIN_DATE` date DEFAULT NULL,
  `LOCK_ATTEMPTS` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `USER_DETAILS_FK1` (`USER_ID`),
  KEY `USER_DETAILS_FK2` (`LANGUAGE_ID`),
  CONSTRAINT `USER_DETAILS_FK1` FOREIGN KEY (`USER_ID`) REFERENCES `USER_MASTER` (`ID`),
  CONSTRAINT `USER_DETAILS_FK2` FOREIGN KEY (`LANGUAGE_ID`) REFERENCES `LANGUAGE_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `USER_DETAILS_AUDIT` */

DROP TABLE IF EXISTS `USER_DETAILS_AUDIT`;

CREATE TABLE `USER_DETAILS_AUDIT` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `USER_DETAILS_ID` int NOT NULL,
  `USER_ID` int NOT NULL,
  `PASSWORD_EXPIRATION_DATE` datetime DEFAULT NULL,
  `LANGUAGE_ID` int DEFAULT NULL,
  `PAGE_SIZE` int DEFAULT NULL,
  `PWD_VALIDATION_CODE` varchar(100) DEFAULT NULL,
  `IS_TEMPORARYPASSWORD` int DEFAULT NULL,
  `LAST_LOGIN_DATE` date DEFAULT NULL,
  `LOCK_ATTEMPTS` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `OPERATION` int DEFAULT NULL,
  `OPERATION_DATE` datetime DEFAULT NULL,
  `IP_ADDRESS` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `USER_DETAILS_AUDIT_FK1` (`USER_ID`),
  KEY `USER_DETAILS_AUDIT_FK2` (`LANGUAGE_ID`),
  KEY `USER_DETAILS_AUDIT_FK3` (`USER_DETAILS_ID`),
  CONSTRAINT `USER_DETAILS_AUDIT_FK1` FOREIGN KEY (`USER_ID`) REFERENCES `USER_MASTER` (`ID`),
  CONSTRAINT `USER_DETAILS_AUDIT_FK2` FOREIGN KEY (`LANGUAGE_ID`) REFERENCES `LANGUAGE_MASTER` (`ID`),
  CONSTRAINT `USER_DETAILS_AUDIT_FK3` FOREIGN KEY (`USER_DETAILS_ID`) REFERENCES `USER_DETAILS` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `USER_LOGIN_DETAILS` */

DROP TABLE IF EXISTS `USER_LOGIN_DETAILS`;

CREATE TABLE `USER_LOGIN_DETAILS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `USER_ID` int DEFAULT NULL,
  `LOGIN_DATE` datetime DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `USER_BROWSER_SYSTEM_DETAILS` json DEFAULT NULL,
  `LOG_OUT` datetime DEFAULT NULL,
  `IS_SUCCESS` int DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `CREATED_DATE` date DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `LOGIN_REFRESH_TOKEN` varchar(2000) DEFAULT NULL,
  `LOGIN_TOKEN` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=110 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `USER_MASTER` */

DROP TABLE IF EXISTS `USER_MASTER`;

CREATE TABLE `USER_MASTER` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `LOGIN_ID` varchar(150) NOT NULL,
  `PASSWORD` varchar(250) DEFAULT NULL,
  `FIRST_NAME` varchar(150) DEFAULT NULL,
  `MIDDLE_NAME` varchar(150) DEFAULT NULL,
  `LAST_NAME` varchar(150) DEFAULT NULL,
  `PRIMARY_CONTACTNO` varchar(30) DEFAULT NULL,
  `USER_TYPE_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `CONTACT_NO` json DEFAULT NULL,
  `ADDRESS` json DEFAULT NULL,
  `NOTIFICATION_ID` varchar(150) DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `USER_MASTER_UK2` (`CUSTOMER_ID`,`PRIMARY_CONTACTNO`,`FIRST_NAME`),
  KEY `USER_MASTER_FK1` (`USER_TYPE_ID`),
  CONSTRAINT `USER_MASTER_FK1` FOREIGN KEY (`USER_TYPE_ID`) REFERENCES `USER_TYPE` (`ID`),
  CONSTRAINT `USER_MASTER_FK2` FOREIGN KEY (`CUSTOMER_ID`) REFERENCES `CUSTOMER_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=89 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `USER_MASTER_AUDIT` */

DROP TABLE IF EXISTS `USER_MASTER_AUDIT`;

CREATE TABLE `USER_MASTER_AUDIT` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `USER_ID` int DEFAULT NULL,
  `LOGIN_ID` varchar(150) DEFAULT NULL,
  `PASSWORD` varchar(250) DEFAULT NULL,
  `FIRST_NAME` varchar(150) DEFAULT NULL,
  `MIDDLE_NAME` varchar(150) DEFAULT NULL,
  `LAST_NAME` varchar(150) DEFAULT NULL,
  `PRIMARY_CONTACTNO` int DEFAULT NULL,
  `USER_TYPE_ID` int DEFAULT NULL,
  `CUSTOMER_ID` int DEFAULT NULL,
  `CONTACT_NO` json DEFAULT NULL,
  `ADDRESS` json DEFAULT NULL,
  `NOTIFICATION_ID` varchar(150) DEFAULT NULL,
  `IP_ADDRESS` varchar(150) DEFAULT NULL,
  `OS_USER` varchar(150) DEFAULT NULL,
  `OPERATION` int DEFAULT NULL,
  `OPERATION_DATE` datetime DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  `CREATED_BY` int DEFAULT NULL,
  `MODIFIED_DATE` datetime DEFAULT NULL,
  `MODIFIED_BY` int DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `USER_TYPE` */

DROP TABLE IF EXISTS `USER_TYPE`;

CREATE TABLE `USER_TYPE` (
  `ID` int NOT NULL,
  `name` varchar(150) DEFAULT NULL,
  `CREATED_DATE` datetime DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_COURSES_MASTER` */

DROP TABLE IF EXISTS `VEDIC_COURSES_MASTER`;

CREATE TABLE `VEDIC_COURSES_MASTER` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  `COURSE_TYPE_ID` int DEFAULT NULL,
  `COURSE_DESCRIPTION` varchar(250) DEFAULT NULL,
  `COURSE_DURATION_MONTHS` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `COURSES_FK` (`COURSE_TYPE_ID`),
  CONSTRAINT `COURSES_FK` FOREIGN KEY (`COURSE_TYPE_ID`) REFERENCES `VEDIC_COURSE_TYPE` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_COURSE_HIERACHY` */

DROP TABLE IF EXISTS `VEDIC_COURSE_HIERACHY`;

CREATE TABLE `VEDIC_COURSE_HIERACHY` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  `PARENT_ID` int DEFAULT NULL,
  `ACTIVE` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `COURSES_STRUCTURE_HIERACHY_FK1` (`PARENT_ID`),
  CONSTRAINT `COURSES_STRUCTURE_HIERACHY_FK1` FOREIGN KEY (`PARENT_ID`) REFERENCES `VEDIC_COURSE_HIERACHY` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_COURSE_HIERACHY_LEVEL` */

DROP TABLE IF EXISTS `VEDIC_COURSE_HIERACHY_LEVEL`;

CREATE TABLE `VEDIC_COURSE_HIERACHY_LEVEL` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_COURSE_HIERACHY_MAPPING` */

DROP TABLE IF EXISTS `VEDIC_COURSE_HIERACHY_MAPPING`;

CREATE TABLE `VEDIC_COURSE_HIERACHY_MAPPING` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `COURSE_ID` int NOT NULL,
  `COURSE_HIERACHY_ID` int NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `VEDIC_COURSE_HIERACHY_MAPPING_FK1` (`COURSE_HIERACHY_ID`),
  KEY `VEDIC_COURSE_HIERACHY_MAPPING_FK2` (`COURSE_ID`),
  CONSTRAINT `VEDIC_COURSE_HIERACHY_MAPPING_FK1` FOREIGN KEY (`COURSE_HIERACHY_ID`) REFERENCES `VEDIC_COURSE_HIERACHY` (`ID`),
  CONSTRAINT `VEDIC_COURSE_HIERACHY_MAPPING_FK2` FOREIGN KEY (`COURSE_ID`) REFERENCES `VEDIC_COURSES_MASTER` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_COURSE_TYPE` */

DROP TABLE IF EXISTS `VEDIC_COURSE_TYPE`;

CREATE TABLE `VEDIC_COURSE_TYPE` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `COURSE_TYPE_NAME` varchar(250) DEFAULT NULL,
  `EDUCATIONAL_INSTITUTIONS_ID` int DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `COURSE_TYPE_FK` (`EDUCATIONAL_INSTITUTIONS_ID`),
  CONSTRAINT `COURSE_TYPE_FK` FOREIGN KEY (`EDUCATIONAL_INSTITUTIONS_ID`) REFERENCES `VEDIC_EDUCATIONAL_INSTITUTIONS` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_EDUCATIONAL_INSTITUTIONS` */

DROP TABLE IF EXISTS `VEDIC_EDUCATIONAL_INSTITUTIONS`;

CREATE TABLE `VEDIC_EDUCATIONAL_INSTITUTIONS` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `INSTITUTION_TYPE_ID` int DEFAULT NULL,
  `NAME` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `EDUCATIONAL_INSTITUTIONS_FK` (`INSTITUTION_TYPE_ID`),
  CONSTRAINT `EDUCATIONAL_INSTITUTIONS_FK` FOREIGN KEY (`INSTITUTION_TYPE_ID`) REFERENCES `VEDIC_INSTITUTION_TYPE` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_INSTITUTION_TYPE` */

DROP TABLE IF EXISTS `VEDIC_INSTITUTION_TYPE`;

CREATE TABLE `VEDIC_INSTITUTION_TYPE` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `NAME` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Table structure for table `VEDIC_ROLES_PRIVILEGES` */

DROP TABLE IF EXISTS `VEDIC_ROLES_PRIVILEGES`;

CREATE TABLE `VEDIC_ROLES_PRIVILEGES` (
  `ID` int NOT NULL AUTO_INCREMENT,
  `ROLE_ID` int DEFAULT NULL,
  `PRIVILEG_TYPE_ID` int DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/* Trigger structure for table `USER_MASTER` */

DELIMITER $$

/*!50003 DROP TRIGGER*//*!50032 IF EXISTS */ /*!50003 `TRIG_USER_MASTER_AUDIT` */$$

/*!50003 CREATE */ /*!50003 TRIGGER `TRIG_USER_MASTER_AUDIT` BEFORE UPDATE ON `USER_MASTER` FOR EACH ROW BEGIN
     INSERT INTO USER_MASTER_AUDIT
 SET OPERATION = 'update',
     USER_ID = OLD.ID,
     LOGIN_ID = OLD.LOGIN_ID,
     PASSWORD=OLD.PASSWORD,
     FIRST_NAME=OLD.FIRST_NAME,
     LAST_NAME=OLD.LAST_NAME,
     USER_TYPE_ID=OLD.USER_TYPE_ID,
     CUSTOMER_ID=OLD.CUSTOMER_ID,
     CONTACT_NO=OLD.CONTACT_NO,
     ADDRESS=OLD.ADDRESS,
     NOTIFICATION_ID=OLD.NOTIFICATION_ID,
     PRIMARY_CONTACTNO=OLD.PRIMARY_CONTACTNO,
     CREATED_DATE=OLD.CREATED_DATE,
     CREATED_BY=OLD.CREATED_BY,
     MODIFIED_DATE=OLD.MODIFIED_DATE,
     MODIFIED_BY=OLD.MODIFIED_BY,
     OPERATION_DATE = NOW();

    END */$$


DELIMITER ;

/* Procedure structure for procedure `SP_Get_All_Customers` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_Get_All_Customers` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_Get_All_Customers`()
BEGIN
    SELECT * FROM CUSTOMER_MASTER;
	

	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_CUSTOMER` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_CUSTOMER` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_CUSTOMER`(
        IN  p_NAME                    VARCHAR(150), 
        IN  p_CODE                    VARCHAR(150)   
         )
BEGIN

    INSERT INTO CUSTOMER_MASTER(CODE ,NAME )VALUES(p_CODE , p_NAME) ; 
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_USER_DETAILS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_USER_DETAILS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_USER_DETAILS`(
	
IN	P_USER_ID INT (11),
IN	P_PASSWORD_EXPIRATION_DATE DATETIME ,
IN	P_LANGUAGE_ID INT (11),
IN	P_PAGE_SIZE INT (4),
IN	P_PWD_VALIDATION_CODE VARCHAR (400),
IN	P_IS_TEMPORARYPASSWORD INT (2),
IN	P_LAST_LOGIN_DATE DATE ,
IN	P_LOCK_ATTEMPTS INT (2),
IN	P_CREATED_BY INT (11),
IN	P_CREATED_DATE DATETIME ,
IN	P_MODIFIED_BY INT (11),
IN	P_MODIFIED_DATE DATETIME ,
OUT	P_USER_DETAIL_OUT_ID INT (11)
)
BEGIN
START TRANSACTION;
	   INSERT INTO USER_DETAILS
	   (
	USER_ID ,
	PASSWORD_EXPIRATION_DATE  ,
	LANGUAGE_ID ,
	PAGE_SIZE ,
	PWD_VALIDATION_CODE ,
	IS_TEMPORARYPASSWORD ,
	LAST_LOGIN_DATE  ,
	LOCK_ATTEMPTS ,
	CREATED_BY ,
	CREATED_DATE  ,
	MODIFIED_BY ,
	MODIFIED_DATE 
	   )
	   VALUES(
	P_USER_ID ,
	P_PASSWORD_EXPIRATION_DATE  ,
	P_LANGUAGE_ID ,
	P_PAGE_SIZE,
	P_PWD_VALIDATION_CODE ,
	P_IS_TEMPORARYPASSWORD ,
	P_LAST_LOGIN_DATE  ,
	P_LOCK_ATTEMPTS ,
	P_CREATED_BY ,
	P_CREATED_DATE  ,
	P_MODIFIED_BY ,
	P_MODIFIED_DATE 		   );
   
SET P_USER_DETAIL_OUT_ID= LAST_INSERT_ID(USER_DETAILS) ;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_TEST` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_TEST` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_TEST`(
        IN  p_NAME                    VARCHAR(150), 
        IN  p_CODE                    VARCHAR(150),
        OUT P_OUT_STUDENTID INT(11)  
         )
BEGIN

     insert into JAI_MAA_BHAWANI values('test',now());
    SET P_OUT_STUDENTID=12;
       
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_STUDENT` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_STUDENT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_STUDENT`(
  
IN P_USER_ID int (11),
IN P_ROLL_NO  INT(11),
IN P_GUARDIAN_USER_ID int (11),
IN P_IS_ENROLLED int (11),
IN P_ACTIVE int (11),
IN P_CREATED_BY int (11),
IN P_CREATED_DATE DATETIME ,
IN P_MODIFIED_BY int (11),
IN P_MODIFIED_DATE datetIME,
 OUT P_OUT_STUDENT_ID INT (11)
)
BEGIN
#START TRANSACTION;
	   insert into STUDENT
	   (
	  USER_ID ,
	  ROLL_NO,
	 GUARDIAN_USER_ID ,
	 IS_ENROLLED ,
	 ACTIVE ,
	 CREATED_BY ,
	 CREATED_DATE  ,
	 MODIFIED_BY ,
	 MODIFIED_DATE 
	   )
	   VALUES(
	 P_USER_ID ,
	 P_ROLL_NO,
	 P_GUARDIAN_USER_ID ,
	 P_IS_ENROLLED ,
	 P_ACTIVE ,
	 P_CREATED_BY ,
	 P_CREATED_DATE  ,
	 P_MODIFIED_BY ,
	 P_MODIFIED_DATE 
	   );
   
SET P_OUT_STUDENT_ID= last_insert_id() ;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_GENERATE_LOGIN_KEY` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_GENERATE_LOGIN_KEY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_GENERATE_LOGIN_KEY`(
    IN P_LOGINID VARCHAR(100),    
    IN P_FIRSTNAME VARCHAR(100),
    OUT P_OUTLOGIN VARCHAR(150))
BEGIN
	DECLARE V_LENGTH INT(4);
	DECLARE LOGINID VARCHAR(150);
	DECLARE V_LOGIN VARCHAR(4);

          	
	SET V_LENGTH=4;
	  
	SELECT COUNT(1)INTO LOGINID FROM LOGIN_KEY_GENERATION WHERE CONCAT(LOGIN_PREFIX,LOGIN_ID)=P_LOGINID;
        IF LOGINID=0 THEN
        SET V_LOGIN=SUBSTR(P_FIRSTNAME,1,V_LENGTH);
        INSERT INTO LOGIN_KEY_GENERATION (LOGIN_PREFIX)VALUES(V_LOGIN);
        SELECT CONCAT(LOGIN_PREFIX,LOGIN_ID)INTO P_OUTLOGIN FROM LOGIN_KEY_GENERATION WHERE LOGIN_ID=LAST_INSERT_ID();
        ELSE 
        SET P_OUTLOGIN=P_LOGINID;
        END IF;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_STUDENT_BRANCH` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_STUDENT_BRANCH` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_STUDENT_BRANCH`(
    

IN P_STUDENT_ID INT(11) , 
IN P_BRANCH_ID INT(11) , 
IN P_CREATED_BY INT(11) , 
IN P_CREATED_DATE DATETIME , 
OUT P_STUDENT_BRANCH_ID	INT(11)    
    )
BEGIN

	INSERT INTO STUDENT_BRANCHES 
	(
	STUDENT_ID, 
	BRANCH_ID, 
	CREATED_BY, 
	CREATED_DATE
	)
	VALUES
	(
 P_STUDENT_ID, 
 P_BRANCH_ID, 
 P_CREATED_BY, 
 P_CREATED_DATE 
	);

SET P_STUDENT_BRANCH_ID=LAST_INSERT_ID();
	END */$$
DELIMITER ;

/* Procedure structure for procedure `DEV_TEST` */

/*!50003 DROP PROCEDURE IF EXISTS  `DEV_TEST` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `DEV_TEST`(IN P_STUDENT_OBJECT JSON,
OUT P_OUT_FLAG VARCHAR(50)    
    )
BEGIN
   

CALL SP_CREATE_STUDENT('{
  "CustomerId": 1,
  "BranchId": 1,
  "CreatedBy": 1,
  "CreatedDate": "2019-11-28T10:44:55.2986176+05:30",
  "RollNo": 1234,
  "AcademicInstituteId": 1,
  "IsEnrolled": 1,
  "StudentDetails": {
    "Father": {
      "FirstName": "fist father1",
      "MiddleName": "middle father",
      "LastName": "lst father",
      "NotificationId": "father@fdf.ddfdf",
      "PrimaryContact": "435345",
      "Qualification": "BCA",
      "AnnualIncome": 1256455
    },
    "Mother": {
      "FirstName": "fist mother1",
      "MiddleName": "middle mother",
      "LastName": "lst mother",
      "NotificationId": "mother@fdf.ddfdf",
      "PrimaryContact": "34545",
      "Qualification": "MCA",
      "AnnualIncome": 1256455
    },
    "Details": {
      "Qualification": "MCA",
      "AnnualIncome": 456256,
      "Occupation": "Retd.",
      "Address": {
        "Address1": "add1",
        "Address2": "add2",
        "City": "Bhopal",
        "State": "MP",
        "Pincode": "34343"
      },
      "ContactNumber": {
        "Mobile": "56485",
        "Mobile2": "1234",
        "Landline": "34343434"
      }
    },
    "LoginId": "",
    "Password": "passsssss",
    "FirstName": "first",
    "MiddleName": "middle",
    "LastName": "last",
    "NotificationId": "vijujdf@ffd.dd",
    "PrimaryContact": "23434",
    "DateOfBirth": "2018-05-10T10:44:55.3000895+05:30",
    "Sex": "M",
    "ImageName": "images.jpg"
  },
  "GuardianDetails": {
    "Details": {
      "Qualification": "MCA",
      "AnnualIncome": 456256,
      "Occupation": "Retd.",
      "Address": {
        "Address1": "add1",
        "Address2": "add2",
        "City": "Bhopal",
        "State": "MP",
        "Pincode": "34343"
      },
      "ContactNumber": {
        "Mobile": "12546",
        "Mobile2": "12345",
        "Landline": "34343434"
      }
    },
    "LoginId": "",
    "Password": "passsssss",
    "FirstName": "first",
    "MiddleName": "middle",
    "LastName": "last",
    "NotificationId": "vijujdf@ffd.dd",
    "PrimaryContact": "32434",
    "DateOfBirth": "2018-05-10T10:44:55.2988866+05:30",
    "Sex": "M",
    "ImageName": "images.jpg"
  }
}',@P_OUT_FLAG,@P_OUT_STUDENTID);
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_STUDENT_COURSES` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_STUDENT_COURSES` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_STUDENT_COURSES`(
   IN      P_STUDENT_ID                 INT,
   IN      P_STUDENT_ADMISSION_DTL_ID   INT,
   IN      P_BRANCH_COURSES_ID          INT,
   IN      P_COURSE_FEE_AMOUNT          DECIMAL,
   IN      P_DISCOUNT_ALLOWED           INT,
   IN      P_DISCOUNTED_FEE_AMOUNT      DECIMAL,
   IN      P_TOTAL_PAID_AMOUNT          DECIMAL,
   IN      P_ADDITIONAL_FEES            DECIMAL,
   IN      P_INSTALLMENT_TYPE           INT,
   IN      P_INSTALLMENT_START_DATE     DATETIME,
   IN      P_NO_OF_INSTALLMENT          INT,
   IN      P_REMARKS                    VARCHAR(500),
   IN      P_ACTIVE                     VARCHAR(1),
   IN      P_CREATED_DATE               DATETIME,
       OUT P_OUT_STUDENT_COURSE_ID      INT)
BEGIN
   INSERT INTO STUDENT_COURSES(STUDENT_ID,
                               STUDENT_ADMISSION_DTL_ID,
                               BRANCH_COURSES_ID,
                               COURSE_FEE_AMOUNT,
                               DISCOUNT_ALLOWED,
                               DISCOUNTED_FEE_AMOUNT,
                               TOTAL_PAID_AMOUNT,
                               ADDITIONAL_FEES,
                               INSTALLMENT_TYPE,
                               INSTALLMENT_START_DATE,
                               NO_OF_INSTALLMENT,
                               REMARKS,
                               ACTIVE,
                               CREATED_DATE,
                               CREATED_BY)
        VALUES (P_STUDENT_ID,
                P_STUDENT_ADMISSION_DTL_ID,
                P_BRANCH_COURSES_ID,
                P_COURSE_FEE_AMOUNT,
                P_DISCOUNT_ALLOWED,
                P_DISCOUNTED_FEE_AMOUNT,
                P_TOTAL_PAID_AMOUNT,
                P_ADDITIONAL_FEES,
                P_INSTALLMENT_TYPE,
                P_INSTALLMENT_START_DATE,
                P_NO_OF_INSTALLMENT,
                P_REMARKS,
                P_ACTIVE,
                P_CREATED_DATE,
                P_CREATED_BY);

   SET P_OUT_STUDENT_COURSE_ID = LAST_INSERT_ID();
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_ADMISSION_DETAILS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_ADMISSION_DETAILS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_ADMISSION_DETAILS`(
   IN      P_STUDENT_ID                       INT,
   IN      P_BRANCH_ID                        INT,
   IN      P_ACADEMIC_YEARID                  INT,
   IN      P_DATE_OF_ADMISSION                DATETIME,
   IN      P_ADMISSION_TYPEID                 INT,
   IN      P_CREATED_DATE                     DATETIME,
   IN      P_CREATED_BY                       INT,
       OUT P_OUT_STUDENT_ADMISSION_DETAILID   INT)
BEGIN
   INSERT INTO STUDENT_ADMISSION_DETAILS(STUDENT_ID,
                                         BRANCH_ID,
                                         ACADEMIC_YEARID,
                                         DATE_OF_ADMISSION,
                                         ADMISSION_TYPEID,
                                         CREATED_DATE,
                                         CREATED_BY,
                                         ACTIVE)
        VALUES (P_STUDENT_ID,
                P_BRANCH_ID,
                P_ACADEMIC_YEARID,
                P_DATE_OF_ADMISSION,
                P_ADMISSION_TYPEID,
                P_CREATED_DATE,
                P_CREATED_BY,
                P_ACTIVE);

   SET P_OUT_STUDENT_ADMISSION_DETAILID = LAST_INSERT_ID();
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_FEE_STRUCTURE` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_FEE_STRUCTURE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_FEE_STRUCTURE`(
   IN      P_STUDENT_COURSE_ID           INT,
   IN      P_FEE_TYPE_ID                 INT,
   IN      P_FEE_AMOUNT                  INT,
   IN      P_CREATED_DATE                DATETIME,
   IN      P_CREATED_BY                  INT,
       OUT P_OUT_STUDENT_FEE_STRUCT_ID   INT)
BEGIN
   INSERT INTO STUDENT_FEE_STRUCTURE(STUDENT_COURSE_ID,
                                     FEE_TYPE_ID,
                                     FEE_AMOUNT,
                                     CREATED_DATE,
                                     CREATED_BY)
        VALUES (P_STUDENT_COURSE_ID,
                P_FEE_TYPE_ID,
                P_FEE_AMOUNT,
                P_CREATED_DATE,
                P_CREATED_BY);

   SET P_OUT_STUDENT_FEE_STRUCT_ID = LAST_INSERT_ID();
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_STUDENT_PAYMENTS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_STUDENT_PAYMENTS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_STUDENT_PAYMENTS`(
   IN P_STUDENT_COURSE_ID   INT,
   IN P_PAYMENT_AMOUNT      INT,
   IN P_PAYMENT_STATUS      INT,
   IN P_CHEQUE_SCAN_IMAGE   VARCHAR(150),
   IN P_CHEQUE_NUMBER       VARCHAR(150),
   IN P_PAYMENT_MODE        VARCHAR(100),
   IN P_REMARKS             VARCHAR(500),
   IN P_RECEIVER            VARCHAR(500),
   IN P_PAYMENT_DATE        DATETIME,
   IN P_CREATED_DATE        DATETIME,
   IN P_CREATED_BY          INT)
BEGIN
   INSERT INTO STUDENT_PAYMENT_DETAILS(STUDENT_COURSE_ID,
                                       PAYMENT_AMOUNT,
                                       PAYMENT_STATUS,
                                       CHEQUE_SCAN_IMAGE,
                                       CHEQUE_NUMBER,
                                       PAYMENT_MODE,
                                       REMARKS,
                                       RECEIVER,
                                       PAYMENT_DATE,
                                       CREATED_DATE,
                                       CREATED_BY)
        VALUES (P_STUDENT_COURSE_ID,
                P_PAYMENT_AMOUNT,
                P_PAYMENT_STATUS,
                P_CHEQUE_SCAN_IMAGE,
                P_CHEQUE_NUMBER,
                P_PAYMENT_MODE,
                P_REMARKS,
                P_RECEIVER,
                P_PAYMENT_DATE,
                P_CREATED_DATE,
                P_CREATED_BY);
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_COURSE_FEE_STRUCTURE` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_COURSE_FEE_STRUCTURE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_COURSE_FEE_STRUCTURE`(
   IN      P_BRANCH_COURSE_ID              INT,
   IN      P_FEE_TYPE_ID                   INT,
   IN      P_FEE_AMOUNT                    DECIMAL,
   IN      P_CREATED_BY                    INT,
   IN      P_CREATED_DATE                  DATETIME,
       OUT P_OUT_COURSE_FEE_STRUCTURE_ID   INT)
BEGIN
   INSERT INTO COURSE_FEE_STRUCTURE(BRANCH_COURSE_ID,
                                    FEE_TYPE_ID,
                                    FEE_AMOUNT,
                                    CREATED_BY,
                                    CREATED_DATE_)
        VALUES (P_BRANCH_COURSE_ID,
                P_FEE_TYPE_ID,
                P_FEE_AMOUNT,
                P_CREATED_BY,
                P_CREATED_DATE);

   SET P_OUT_COURSE_FEE_STRUCTURE_ID = LAST_INSERT_ID();
END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_CREATE_STUDENT` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_CREATE_STUDENT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_CREATE_STUDENT`(IN P_STUDENT_OBJECT JSON,
OUT P_OUT_FLAG VARCHAR(50)    ,
OUT P_OUT_STUDENTID INT
    )
BEGIN
#STUDENT
    DECLARE    J_V_CUSTOMERID VARCHAR(40);    
    DECLARE    J_V_STUDENT_LOGIN VARCHAR(150);
    DECLARE    J_V_STUDENT_LOGIN_PASSWORD VARCHAR(250);
    DECLARE    J_V_STUDENT_ROLLNO INT;
    DECLARE    J_V_STUDENT_FIRST_NAME VARCHAR(150);
    DECLARE    J_V_STUDENT_MIDDLE_NAME VARCHAR(150);
    DECLARE    J_V_STUDENT_LAST_NAME VARCHAR(150);
    DECLARE    J_V_STUDENT_NOTIFICATION_ID VARCHAR(150) ;
    DECLARE    J_V_STUDENT_ADDRESS JSON ;
    DECLARE    J_V_STUDENT_CONTACTNO JSON ;
    DECLARE    J_V_STUDENT_PRIMARY_CONTACTNO VARCHAR(150) ;
    DECLARE    J_V_IS_ENROLLED INT;
    DECLARE    J_V_BRANCH_ID INT;
#GUARDIAN 
    DECLARE    J_V_GUARDIAN_LOGIN VARCHAR(150) ;
    DECLARE    J_V_GUARDIAN_LOGIN_PASSWORD VARCHAR(250);
    DECLARE    J_V_GUARDIAN_FIRST_NAME VARCHAR(150);
    DECLARE    J_V_GUARDIAN_MIDDLE_NAME VARCHAR(150);
    DECLARE    J_V_GUARDIAN_LAST_NAME VARCHAR(150) ;
    DECLARE    J_V_GUARDIAN_NOTIFICATION_ID     VARCHAR(150) ;
    DECLARE    J_V_GUARDIAN_ADDRESS JSON ;
    DECLARE    J_V_GUARDIAN_CONTACTNO JSON;
    DECLARE    J_V_GURARDIAN_PRIMARY_CONTACTNO INT;
    DECLARE    J_V_FATHER_FIRST_NAME VARCHAR(150) ;
    DECLARE    J_V_FATHER_MIDDLE_NAME VARCHAR(150) ;
    DECLARE    J_V_FATHER_LAST_NAME VARCHAR(150) ;
    DECLARE    J_V_FATHER_OCCUPATION VARCHAR(150) ;
    DECLARE    J_V_FATHER_QUALIFICATION VARCHAR(150) ;
    DECLARE    J_V_FATHER_ANUAL_INCOME DECIMAL ;
    DECLARE    J_V_FATHER_NOTIFICATION_ID     VARCHAR(150) ;
    DECLARE    J_V_FATHER_ADDRESS JSON;
    DECLARE    J_V_FATHER_CONTACTNO JSON ;
    DECLARE    J_V_FATHER_PRIMARY_CONTACTNO INT;
    DECLARE    J_V_MOTHER_FIRST_NAME VARCHAR(150) ;
    DECLARE    J_V_MOTHER_MIDDLE_NAME VARCHAR(150) ;
    DECLARE    J_V_MOTHER_LAST_NAME VARCHAR(150);
    DECLARE    J_V_MOTHER_OCCUPATION VARCHAR(150) ;
    DECLARE    J_V_MOTHER_QUALIFICATION VARCHAR(150) ;
    DECLARE    J_V_STUDENT_GENDER VARCHAR(2) ;
    DECLARE    J_V_STUDENT_IMAGE_PATH VARCHAR(150) ;
    DECLARE    J_V_MOTHER_ANUAL_INCOME DECIMAL ;
    DECLARE    J_V_MOTHER_NOTIFICATION_ID  VARCHAR(150)  ;
    DECLARE    J_V_MOTHER_ADDRESS JSON  ;
    DECLARE    J_V_MOTHER_CONTACTNO JSON;
    DECLARE     J_V_MOTHER_PRIMARY_CONTACTNO INT;
    DECLARE    J_V_CREATED_BY INT;
    DECLARE    J_V_CREATED_DATE DATETIME ;
    DECLARE   J_V_STUDENT_ACADEMIC_INSTITUTE VARCHAR(150);
    DECLARE   J_V_STUDENT_DATE_OF_BIRTH DATETIME;
    DECLARE   J_V_STUDENT_QUALIFICATION VARCHAR(150);
 
    #Internal Varialbles 
    DECLARE    V_MODIFIED_BY INT ;
    DECLARE    V_MODIFIED_DATE DATETIME ;
    DECLARE    V_ACTIVE INT;
    DECLARE    V_USERTYPEID_FOR_STUDENT INT;
    DECLARE    V_USERTYPEID_FOR_GUARDIAN INT;
    #OUTPUT ID Variables
    DECLARE    V_USER_ID_FOR_STUDENT INT;
    DECLARE    V_USER_ID_FOR_GUARDIAN INT;
    DECLARE    V_OUT_USER_ID INT;
    DECLARE    V_STUDENT_ID INT;
    DECLARE    V_STUDENT_DETAIL_ID INT;
    DECLARE    V_AUTO_GENERATED_SLOGINID VARCHAR(150);
    DECLARE    V_AUTO_GENERATED_GLOGINID VARCHAR(150);
    DECLARE    V_STUDENT_BRANCH_ID INT;

		SELECT  CUSTOMERID,
		        BRANCHID,
		        LOWER(STUDENT_LOGIN) STUDENT_LOGIN,
		        STUDENT_ROLLNO,
		        STUDENT_LOGIN_PASSWORD,
			STUDENT_FIRST_NAME ,
			STUDENT_MIDDLE_NAME ,
			STUDENT_LAST_NAME ,
			STUDENT_NOTIFICATION_ID ,
			STUDENT_ADDRESS ,
			STUDENT_CONTACTNO ,
			STUDENT_PRIMARY_CONTACTNO,
			ACADEMIC_INSTITUTE_ID,
			STUDENT_QUALIFICATION,
			STUDENT_DATE_OF_BIRTH,
			STUDENT_GENDER,
			STUDENT_IMAGE_PATH,
			IS_ENROLLED ,
			LOWER(GUARDIAN_LOGIN) GUARDIAN_LOGIN,
			GUARDIAN_LOGIN_PASSWORD,
			GUARDIAN_FIRST_NAME ,
			GUARDIAN_MIDDLE_NAME ,
			GUARDIAN_LAST_NAME ,
			GUARDIAN_NOTIFICATION_ID ,
			GUARDIAN_ADDRESS ,
			GUARDIAN_CONTACTNO ,
			GURARDIAN_PRIMARY_CONTACTNO,
		        FATHER_FIRST_NAME ,
			FATHER_MIDDLE_NAME ,
			FATHER_LAST_NAME ,
			FATHER_OCCUPATION ,
			FATHER_QUALIFICATION,
			FATHER_ANUAL_INCOME,
			FATHER_NOTIFICATION_ID ,
			FATHER_ADDRESS ,
			FATHER_CONTACTNO ,
			FATHER_PRIMARY_CONTACTNO,
			MOTHER_FIRST_NAME ,
			MOTHER_MIDDLE_NAME ,
			MOTHER_LAST_NAME ,
			MOTHER_OCCUPATION ,
			MOTHER_QUALIFICATION,
			MOTHER_ANUAL_INCOME ,
			MOTHER_NOTIFICATION_ID  ,
			MOTHER_ADDRESS ,
			MOTHER_CONTACTNO ,
			MOTHER_PRIMARY_CONTACTNO,
			CREATED_BY,
			CREATED_DATE
			INTO 
			J_V_CUSTOMERID,
			J_V_BRANCH_ID,
			J_V_STUDENT_LOGIN ,
			J_V_STUDENT_ROLLNO,
			J_V_STUDENT_LOGIN_PASSWORD,
			J_V_STUDENT_FIRST_NAME ,
			J_V_STUDENT_MIDDLE_NAME ,
			J_V_STUDENT_LAST_NAME ,
			J_V_STUDENT_NOTIFICATION_ID ,
			J_V_STUDENT_ADDRESS ,
			J_V_STUDENT_CONTACTNO ,
			J_V_STUDENT_PRIMARY_CONTACTNO,
			J_V_STUDENT_ACADEMIC_INSTITUTE,
			J_V_STUDENT_QUALIFICATION,
			J_V_STUDENT_DATE_OF_BIRTH,
			J_V_STUDENT_GENDER,
			J_V_STUDENT_IMAGE_PATH,
			J_V_IS_ENROLLED ,
			J_V_GUARDIAN_LOGIN ,
			J_V_GUARDIAN_LOGIN_PASSWORD,
			J_V_GUARDIAN_FIRST_NAME ,
			J_V_GUARDIAN_MIDDLE_NAME ,
			J_V_GUARDIAN_LAST_NAME ,
			J_V_GUARDIAN_NOTIFICATION_ID ,
			J_V_GUARDIAN_ADDRESS ,
			J_V_GUARDIAN_CONTACTNO ,
			J_V_GURARDIAN_PRIMARY_CONTACTNO,
			J_V_FATHER_FIRST_NAME ,
			J_V_FATHER_MIDDLE_NAME ,
			J_V_FATHER_LAST_NAME ,
			J_V_FATHER_OCCUPATION ,
			J_V_FATHER_QUALIFICATION,
			J_V_FATHER_ANUAL_INCOME,
			J_V_FATHER_NOTIFICATION_ID ,
			J_V_FATHER_ADDRESS ,
			J_V_FATHER_CONTACTNO ,
			J_V_FATHER_PRIMARY_CONTACTNO,
			J_V_MOTHER_FIRST_NAME ,
			J_V_MOTHER_MIDDLE_NAME ,
			J_V_MOTHER_LAST_NAME ,
			J_V_MOTHER_OCCUPATION ,
			J_V_MOTHER_QUALIFICATION,
			J_V_MOTHER_ANUAL_INCOME ,
			J_V_MOTHER_NOTIFICATION_ID  ,
			J_V_MOTHER_ADDRESS ,
			J_V_MOTHER_CONTACTNO  ,
			J_V_MOTHER_PRIMARY_CONTACTNO,
			J_V_CREATED_BY,
			J_V_CREATED_DATE
			FROM
		 JSON_TABLE(P_STUDENT_OBJECT, 
			  '$' COLUMNS (
             CUSTOMERID INT PATH '$.CustomerId' ,
            BRANCHID INT PATH '$.BranchId' ,
            STUDENT_ROLLNO INT PATH '$.RollNo' ,
            CREATED_BY INT PATH '$.CreatedBy' ,
            CREATED_DATE DATETIME PATH '$.CreatedDate' ,
            ACADEMIC_INSTITUTE_ID INT PATH '$.AcademicInstituteId' ,
            IS_ENROLLED INT PATH '$.IsEnrolled' ,
            #STUDENT           
            STUDENT_LOGIN VARCHAR(150)  PATH '$.StudentDetails.LoginId',
	    STUDENT_LOGIN_PASSWORD VARCHAR(250)  PATH '$.StudentDetails.Password',
            STUDENT_FIRST_NAME VARCHAR(150) PATH '$.StudentDetails.FirstName',
            STUDENT_MIDDLE_NAME VARCHAR(150) PATH '$.StudentDetails.MiddleName',
            STUDENT_LAST_NAME VARCHAR(150) PATH '$.StudentDetails.LastName', 
            STUDENT_NOTIFICATION_ID VARCHAR(150) PATH '$.StudentDetails.NotificationId', 
            STUDENT_PRIMARY_CONTACTNO VARCHAR(150) PATH '$.StudentDetails.PrimaryContact', 
            STUDENT_DATE_OF_BIRTH DATETIME PATH '$.StudentDetails.DateOfBirth', 
            STUDENT_GENDER VARCHAR(2) PATH '$.StudentDetails.Sex', 
            STUDENT_IMAGE_PATH VARCHAR(150) PATH '$.StudentDetails.ImageName', 
            STUDENT_ADDRESS JSON PATH '$.StudentDetails.Details.Address' ,
            STUDENT_CONTACTNO VARCHAR(500) PATH '$.StudentDetails.Details.ContactNumber' ,
            STUDENT_QUALIFICATION VARCHAR(150) PATH '$.StudentDetails.Details.Qualification', 
            STUDENT_ANNUAL_INCOME DECIMAL PATH '$.StudentDetails.Details.AnnualIncome', 
            STUDENT_OCCUPATION VARCHAR(150) PATH '$.StudentDetails.Details.Occupation',
            #FATHER
            FATHER_FIRST_NAME VARCHAR(150) PATH '$.StudentDetails.Father.FirstName',
            FATHER_MIDDLE_NAME VARCHAR(150) PATH '$.StudentDetails.Father.MiddleName',
            FATHER_LAST_NAME VARCHAR(150) PATH '$.StudentDetails.Father.LastName',
            FATHER_OCCUPATION VARCHAR(150) PATH '$.StudentDetails.Father.Occupation',
            FATHER_QUALIFICATION VARCHAR(150) PATH '$.StudentDetails.Father.Qualification',
            FATHER_ANUAL_INCOME DECIMAL PATH '$.StudentDetails.Father.AnnualIncome',
            FATHER_PRIMARY_CONTACTNO INT PATH '$.StudentDetails.Father.PrimaryContact' , 
            FATHER_NOTIFICATION_ID     VARCHAR(150) PATH '$.StudentDetails.Father.NotificationId',
            FATHER_ADDRESS JSON PATH '$.StudentDetails.Father.Address' ,
            FATHER_CONTACTNO JSON PATH '$.StudentDetails.Father.ContactNumber' ,
            FATHER_PRIMARY_NO INT PATH '$.StudentDetails.Father.PrimaryContact' ,
            #MOTHER
            MOTHER_FIRST_NAME VARCHAR(150) PATH '$.StudentDetails.Mother.FirstName',
            MOTHER_MIDDLE_NAME VARCHAR(150) PATH '$.StudentDetails.Mother.MiddleName',
            MOTHER_LAST_NAME VARCHAR(150) PATH '$.StudentDetails.Mother.LastName',
            MOTHER_OCCUPATION VARCHAR(150) PATH '$.StudentDetails.Mother.Occupation',
            MOTHER_QUALIFICATION VARCHAR(150) PATH '$.StudentDetails.Mother.Qualification',
            MOTHER_ANUAL_INCOME DECIMAL PATH '$.StudentDetails.Mother.AnnualIncome',
            MOTHER_NOTIFICATION_ID     VARCHAR(150) PATH '$.StudentDetails.Mother.NotificationId',
            MOTHER_ADDRESS JSON PATH '$.StudentDetails.Mother.Address' ,
            MOTHER_CONTACTNO JSON PATH '$.StudentDetails.Mother.ContactNumber' ,
            MOTHER_PRIMARY_CONTACTNO INT PATH '$.StudentDetails.Mother.PrimaryContact' ,
            #GUARDIAN 
            GUARDIAN_LOGIN VARCHAR(150)  PATH '$.GuardianDetails.LoginId',
            GUARDIAN_LOGIN_PASSWORD VARCHAR(250)  PATH '$.GuardianDetails.Password',
            GUARDIAN_FIRST_NAME VARCHAR(150) PATH '$.GuardianDetails.FirstName',
            GUARDIAN_MIDDLE_NAME VARCHAR(150) PATH '$.GuardianDetails.MiddleName',
            GUARDIAN_LAST_NAME VARCHAR(150) PATH '$.GuardianDetails.LastName',
            GUARDIAN_NOTIFICATION_ID     VARCHAR(150) PATH '$.GuardianDetails.NotificationId',
            GURARDIAN_PRIMARY_CONTACTNO INT PATH '$.GuardianDetails.PrimaryContact',   
            GURARDIAN_DATE_OF_BIRTH DATETIME PATH '$.GuardianDetails.DateOfBirth',              
            GURARDIAN_GENDER VARCHAR(4) PATH '$.GuardianDetails.Sex',              
            GUARDIAN_IMAGE VARCHAR(150) PATH '$.GuardianDetails.ImageName' ,                   
            GUARDIAN_ADDRESS JSON PATH '$.GuardianDetails.Details.Address' ,
            GUARDIAN_CONTACTNO JSON PATH '$.GuardianDetails.Details.ContactNumber' ,
            GUARDIAN_QUALIFICATION VARCHAR(150) PATH '$.GuardianDetails.Details.Qualification' , 
            GUARDIAN_ANNUAL_INCOME VARCHAR(150) PATH '$.GuardianDetails.Details.AnnualIncome' , 
            GUARDIAN_OCCUPATION VARCHAR(150) PATH '$.GuardianDetails.Details.Occupation' 
            
							
						   )
				 ) STUDENT_DETAILS;
				  SET autocommit = 0;
START TRANSACTION;
SET V_ACTIVE=1;
SET V_USERTYPEID_FOR_STUDENT=3;
SET V_USERTYPEID_FOR_GUARDIAN=4;
SET V_USER_ID_FOR_STUDENT=0; 
SET V_USER_ID_FOR_GUARDIAN  =0;
SET V_STUDENT_ID=0;
SET V_STUDENT_DETAIL_ID=0;
    #First Student is exits or not if not exists then create user first
    
    
       #AUTO GENERATION LOGIN ID
       IF TRIM(J_V_STUDENT_LOGIN) IS NULL OR J_V_STUDENT_LOGIN='' 
       THEN
       CALL SP_GENERATE_LOGIN_KEY(J_V_STUDENT_LOGIN, 
                                  J_V_STUDENT_FIRST_NAME,
                                 V_AUTO_GENERATED_SLOGINID);
       ELSE
       SET V_AUTO_GENERATED_SLOGINID=J_V_STUDENT_LOGIN;
       END IF;                          
	
        SELECT IFNULL(ID,0)  INTO V_USER_ID_FOR_STUDENT
        FROM USER_MASTER WHERE customer_id=J_V_CUSTOMERID AND PRIMARY_CONTACTNO=J_V_STUDENT_PRIMARY_CONTACTNO
        AND FIRST_NAME=J_V_STUDENT_FIRST_NAME;
	
	IF V_USER_ID_FOR_STUDENT =0 THEN
		CALL SP_INSERT_USER_MASTER(        V_AUTO_GENERATED_SLOGINID 	,
                                           J_V_STUDENT_LOGIN_PASSWORD	,
                                           J_V_STUDENT_FIRST_NAME,
                                           J_V_STUDENT_MIDDLE_NAME 	,
                                           J_V_STUDENT_LAST_NAME 	,
			                   V_USERTYPEID_FOR_STUDENT	,
                                           V_ACTIVE	,
                                           J_V_CUSTOMERID	,
                                           J_V_STUDENT_CONTACTNO 	,
                                           J_V_STUDENT_ADDRESS 	,
                                           J_V_STUDENT_NOTIFICATION_ID 	,
                                           J_V_CREATED_DATE	,
                                           J_V_CREATED_BY	,
                                           V_MODIFIED_DATE	,
                                           V_MODIFIED_BY	,
                                           J_V_STUDENT_PRIMARY_CONTACTNO,
                                           V_USER_ID_FOR_STUDENT
									);
	END IF;
	
	#SELECT V_USER_ID_FOR_STUDENT;
	#First Guardian is exists or not if not exists then create user first
	
	
	
       #AUTO GENERATION LOGIN ID
       IF TRIM(J_V_GUARDIAN_LOGIN) IS NULL OR J_V_GUARDIAN_LOGIN='' THEN
       CALL SP_GENERATE_LOGIN_KEY(J_V_GUARDIAN_LOGIN, 
                                  J_V_STUDENT_FIRST_NAME,
                                 V_AUTO_GENERATED_GLOGINID);
       ELSE
       SET V_AUTO_GENERATED_GLOGINID=J_V_GUARDIAN_LOGIN;
       END IF;  	
	
	SELECT IFNULL(ID,0)  INTO V_USER_ID_FOR_GUARDIAN
        FROM USER_MASTER WHERE customer_id=J_V_CUSTOMERID  
        AND PRIMARY_CONTACTNO=J_V_GURARDIAN_PRIMARY_CONTACTNO
        AND FIRST_NAME=J_V_GUARDIAN_FIRST_NAME;
        
		IF V_USER_ID_FOR_GUARDIAN =0 THEN
				CALL SP_INSERT_USER_MASTER(V_AUTO_GENERATED_GLOGINID 	,
                                          J_V_GUARDIAN_LOGIN_PASSWORD	,
                                          J_V_GUARDIAN_FIRST_NAME,
                                          J_V_GUARDIAN_MIDDLE_NAME 	,
                                          J_V_GUARDIAN_LAST_NAME 	,
					  V_USERTYPEID_FOR_GUARDIAN	,
                                          V_ACTIVE	,
                                          J_V_CUSTOMERID	,
                                          J_V_GUARDIAN_CONTACTNO 	,
                                          J_V_GUARDIAN_ADDRESS 	,
                                          J_V_GUARDIAN_NOTIFICATION_ID 	,
                                          J_V_CREATED_DATE	,
                                          J_V_CREATED_BY	,
                                          V_MODIFIED_DATE	,
                                          V_MODIFIED_BY	,
                                          J_V_GURARDIAN_PRIMARY_CONTACTNO,
                                          V_USER_ID_FOR_GUARDIAN);
		END IF;
		
		SELECT V_USER_ID_FOR_GUARDIAN;
		#Check whether Student exists or not 
		SELECT IFNULL(ID,0)  INTO V_STUDENT_ID
        FROM STUDENT WHERE USER_ID=V_USER_ID_FOR_STUDENT ;	
		
		IF V_STUDENT_ID=0 THEN 
	         #STUDENT INSERTION 
		CALL SP_INSERT_STUDENT
					(
			  
			V_USER_ID_FOR_STUDENT,
			J_V_STUDENT_ROLLNO,
			V_USER_ID_FOR_GUARDIAN,
			J_V_IS_ENROLLED,
			V_ACTIVE,
			J_V_CREATED_BY,
			J_V_CREATED_DATE ,
			V_MODIFIED_BY,
			V_MODIFIED_DATE,
			V_STUDENT_ID
			);
			
			#BRANCH INSERTION 
               CALL  SP_INSERT_STUDENT_BRANCH(V_STUDENT_ID, 
			J_V_BRANCH_ID , 
			J_V_CREATED_BY , 
			J_V_CREATED_DATE , 
			 V_STUDENT_BRANCH_ID	   
			    )		;	
						
	    END IF;	
         SELECT V_STUDENT_ID ;
		#Check whether Student exists or not 
		SELECT IFNULL(ID,0)  INTO V_STUDENT_DETAIL_ID
        FROM STUDENT_DETAILS WHERE STUDENT_ID=V_STUDENT_ID ;
 
     IF   	V_STUDENT_DETAIL_ID=0 THEN	
		CALL SP_INSERT_STUDENT_DETAILS(
		V_STUDENT_ID,
		J_V_STUDENT_ACADEMIC_INSTITUTE,
		J_V_STUDENT_IMAGE_PATH,
		J_V_FATHER_FIRST_NAME,
		J_V_FATHER_MIDDLE_NAME,
		J_V_FATHER_LAST_NAME,
		J_V_FATHER_PRIMARY_CONTACTNO,
		J_V_FATHER_ANUAL_INCOME,
		J_V_FATHER_QUALIFICATION,
		J_V_FATHER_OCCUPATION,
		J_V_MOTHER_FIRST_NAME,
		J_V_MOTHER_MIDDLE_NAME,
		J_V_MOTHER_LAST_NAME,
		J_V_MOTHER_QUALIFICATION,
		J_V_MOTHER_OCCUPATION,
		J_V_MOTHER_PRIMARY_CONTACTNO,
		J_V_MOTHER_ANUAL_INCOME,
		J_V_STUDENT_DATE_OF_BIRTH ,
		J_V_STUDENT_QUALIFICATION,
		J_V_CREATED_BY,
		J_V_CREATED_DATE,
		V_MODIFIED_BY,
		V_MODIFIED_DATE ,
		V_STUDENT_DETAIL_ID);
          
    END IF;
    
COMMIT;
    
    SET P_OUT_STUDENTID=V_STUDENT_ID;
       
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_USER_MASTER` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_USER_MASTER` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_USER_MASTER`(    
  IN P_LOGIN_ID varchar(150) ,
  IN P_PASSWORD varchar(250) ,
  IN P_FIRST_NAME varchar(150) ,
  IN P_MIDDLE_NAME varchar(150) ,
  IN P_LAST_NAME varchar(150) ,
  IN P_USER_TYPE_ID int(11) ,
  IN P_ACTIVE int(1) ,
  IN P_CUSTOMER_ID int(11) ,
  IN P_CONTACT_NO json ,
  IN P_ADDRESS json ,
  IN P_NOTIFICATION_ID varchar(150) ,
  IN P_CREATED_DATE datetime ,
  IN P_CREATED_BY int(11) ,
  IN P_MODIFIED_DATE datetime ,
  IN P_MODIFIED_BY int(11) ,
  IN P_PRIMARY_CONTACTNO varchar(30),
  OUT P_OUT_USER_ID INT(11) 
  )
BEGIN
	  #START TRANSACTION;
	  
		insert into USER_MASTER
		   (		 
		   LOGIN_ID  ,
		   PASSWORD  ,
		   FIRST_NAME  ,
		   MIDDLE_NAME ,
		   LAST_NAME  ,
		   USER_TYPE_ID  ,
		   PRIMARY_CONTACTNO,
		   ACTIVE  ,
		   CUSTOMER_ID  ,
		   CONTACT_NO  ,
		   ADDRESS  ,
		   NOTIFICATION_ID  ,
		   CREATED_DATE  ,
		   CREATED_BY  ,
		   MODIFIED_DATE  ,
		   MODIFIED_BY 
		   )
		   values
		   (
		
		   P_LOGIN_ID  ,
		   P_PASSWORD  ,
		   P_FIRST_NAME  ,
		   P_MIDDLE_NAME ,
		   P_LAST_NAME  ,
		   P_USER_TYPE_ID  ,
		   P_PRIMARY_CONTACTNO,
		   P_ACTIVE  ,
		   P_CUSTOMER_ID  ,
		   P_CONTACT_NO  ,
		   P_ADDRESS  ,
		   P_NOTIFICATION_ID  ,
		   P_CREATED_DATE  ,
		   P_CREATED_BY  ,
		   P_MODIFIED_DATE  ,
		   P_MODIFIED_BY );
		    #P_ID=last_insert_id(USER_MASTER);
		    SET P_OUT_USER_ID= LAST_INSERT_ID() ;

	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_INSERT_STUDENT_DETAILS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_INSERT_STUDENT_DETAILS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_INSERT_STUDENT_DETAILS`(
in	P_STUDENT_ID int (11),
IN	P_STUDENT_ACADEMIC_INSTITUE_ID INT,
IN	P_STUDENT_IMAGE_PATH VARCHAR(150),
IN	P_FATHER_FIRST_NAME varchar (150),
IN	P_FATHER_MIDDLE_NAME VARCHAR (150),
IN	P_FATHER_LAST_NAME varchar (150),
IN	P_FATHER_CONTACTNO varchar(30),
IN      P_FATHER_ANUAL_INCOME DECIMAL,
IN	P_FATHER_QUALIFICATION varchar (150),
IN	P_FATHER_OCCUPATION varchar (150),
IN	P_MOTHER_FIRST_NAME varchar (150),
IN	P_MOTHER_MIDDLE_NAME VARCHAR (150),
IN	P_MOTHER_LAST_NAME varchar (150),
IN	P_MOTHER_QUALIFICATION varchar (150),
IN	P_MOTHER_OCCUPATION varchar (150),
IN	P_MOTHER_CONTACTNO varchar(30),
IN      P_MOTHER_ANUAL_INCOME DECIMAL,
IN	P_DATE_OF_BIRTH dateTIME ,
IN	P_QUALIFICATION varchar (150),
IN	P_CREATED_BY int (11),
IN	P_CREATED_DATE DATETIME ,
IN	P_MODIFIED_BY int (11),
IN	P_MODIFIED_DATE DATETIME ,
OUT	P_OUT_STUDENT_DETAIL_ID INT (11)
)
BEGIN
#START TRANSACTION;
	   INSERT INTO STUDENT_DETAILS
	   (
	STUDENT_ID ,
	ACADEMIC_INSTITUE_ID,
	STUDENT_IMAGE_PATH,
	FATHER_FIRST_NAME ,
	FATHER_MIDDLE_NAME,
	FATHER_LAST_NAME ,
	FATHER_CONTACTNO ,
	FATHER_ANUAL_INCOME,
	FATHER_QUALIFICATION ,
	FATHER_OCCUPATION,
	MOTHER_FIRST_NAME,
	MOTHER_MIDDLE_NAME,
	MOTHER_LAST_NAME,
	MOTHER_QUALIFICATION,
	MOTHER_OCCUPATION ,
	MOTHER_CONTACTNO ,
	MOTHER_ANUAL_INCOME,
	DATE_OF_BIRTH  ,
	STUDENT_QUALIFICATION,
	CREATED_BY ,
	CREATED_DATE  ,
	MODIFIED_BY ,
	MODIFIED_DATE 
	   )
	   VALUES(
	P_STUDENT_ID ,
P_STUDENT_ACADEMIC_INSTITUE_ID ,
P_STUDENT_IMAGE_PATH,
	P_FATHER_FIRST_NAME ,
	P_FATHER_MIDDLE_NAME,
	P_FATHER_LAST_NAME ,
	P_FATHER_CONTACTNO ,
	P_FATHER_ANUAL_INCOME,
	P_FATHER_QUALIFICATION ,
	P_FATHER_OCCUPATION,
	P_MOTHER_FIRST_NAME,
	P_MOTHER_MIDDLE_NAME,
	P_MOTHER_LAST_NAME,
	P_MOTHER_QUALIFICATION,
	P_MOTHER_OCCUPATION ,
	P_MOTHER_CONTACTNO ,
	P_MOTHER_ANUAL_INCOME,
	P_DATE_OF_BIRTH  ,
	P_QUALIFICATION,
	P_CREATED_BY ,
	P_CREATED_DATE  ,
	P_MODIFIED_BY ,
	P_MODIFIED_DATE  );
   
SET P_OUT_STUDENT_DETAIL_ID= LAST_INSERT_ID() ;
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_UPDATE_STUDENT` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_UPDATE_STUDENT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_UPDATE_STUDENT`(

IN P_STUDENT_ID INT(11),
IN P_ROLL_NO  INT(11),
IN P_IS_ENROLLED int (11),
IN P_ACTIVE int (11),
IN P_MODIFIED_BY int (11),
IN P_MODIFIED_DATE datetIME
)
BEGIN
UPDATE STUDENT SET
 	  ROLL_NO=P_ROLL_NO,
	 IS_ENROLLED=P_IS_ENROLLED ,
	 ACTIVE= P_ACTIVE,
	 MODIFIED_BY=P_MODIFIED_BY ,
	 MODIFIED_DATE =P_MODIFIED_DATE
	   WHERE ID=P_STUDENT_ID;
   

	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_UPDATE_STUDENT_DETAILS` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_UPDATE_STUDENT_DETAILS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_UPDATE_STUDENT_DETAILS`(
in	P_STUDENT_ID int (11),
IN	P_STUDENT_ACADEMIC_INSTITUE_ID INT,
IN	P_STUDENT_IMAGE_PATH VARCHAR(150),
IN	P_FATHER_FIRST_NAME varchar (150),
IN	P_FATHER_MIDDLE_NAME VARCHAR (150),
IN	P_FATHER_LAST_NAME varchar (150),
IN	P_FATHER_CONTACTNO varchar(30),
IN      P_FATHER_ANUAL_INCOME DECIMAL,
IN	P_FATHER_QUALIFICATION varchar (150),
IN	P_FATHER_OCCUPATION varchar (150),
IN	P_MOTHER_FIRST_NAME varchar (150),
IN	P_MOTHER_MIDDLE_NAME VARCHAR (150),
IN	P_MOTHER_LAST_NAME varchar (150),
IN	P_MOTHER_QUALIFICATION varchar (150),
IN	P_MOTHER_OCCUPATION varchar (150),
IN	P_MOTHER_CONTACTNO varchar(30),
IN      P_MOTHER_ANUAL_INCOME DECIMAL,
IN	P_DATE_OF_BIRTH dateTIME ,
IN	P_QUALIFICATION varchar (150),
IN	P_MODIFIED_BY int (11),
IN	P_MODIFIED_DATE DATETIME 
)
BEGIN
#START TRANSACTION;
	UPDATE STUDENT_DETAILS
	  SET

	ACADEMIC_INSTITUE_ID=P_STUDENT_ACADEMIC_INSTITUE_ID,
	STUDENT_IMAGE_PATH=P_STUDENT_IMAGE_PATH,
	FATHER_FIRST_NAME=P_FATHER_FIRST_NAME ,
	FATHER_MIDDLE_NAME=P_FATHER_MIDDLE_NAME,
	FATHER_LAST_NAME=P_FATHER_LAST_NAME ,
	FATHER_CONTACTNO= P_FATHER_CONTACTNO,
	FATHER_ANUAL_INCOME=P_FATHER_ANUAL_INCOME,
	FATHER_QUALIFICATION= P_FATHER_QUALIFICATION,
	FATHER_OCCUPATION=P_FATHER_OCCUPATION,
	MOTHER_FIRST_NAME=P_MOTHER_FIRST_NAME,
	MOTHER_MIDDLE_NAME=P_MOTHER_MIDDLE_NAME,
	MOTHER_LAST_NAME=P_MOTHER_LAST_NAME,
	MOTHER_QUALIFICATION=P_MOTHER_QUALIFICATION,
	MOTHER_OCCUPATION =P_MOTHER_OCCUPATION,
	MOTHER_CONTACTNO=P_MOTHER_CONTACTNO ,
	MOTHER_ANUAL_INCOME=P_MOTHER_ANUAL_INCOME,
	DATE_OF_BIRTH= P_DATE_OF_BIRTH,
	STUDENT_QUALIFICATION=P_STUDENT_QUALIFICATION,

	MODIFIED_BY=P_MODIFIED_BY ,
	MODIFIED_DATE =P_MODIFIED_DATE
	  WHERE STUDENT_ID=P_STUDENT_ID;
   

	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_EDIT_STUDENT` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_EDIT_STUDENT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_EDIT_STUDENT`(IN P_STUDENT_OBJECT JSON,
OUT P_OUT_FLAG VARCHAR(50)    

    )
BEGIN
#STUDENT
    DECLARE    J_V_CUSTOMERID VARCHAR(40);    
    DECLARE    J_V_STUDENT_LOGIN VARCHAR(150);
    DECLARE    J_V_STUDENT_LOGIN_PASSWORD VARCHAR(250);
    DECLARE    J_V_STUDENT_ROLLNO INT;
    DECLARE    J_V_STUDENT_FIRST_NAME VARCHAR(150);
    DECLARE    J_V_STUDENT_MIDDLE_NAME VARCHAR(150);
    DECLARE    J_V_STUDENT_LAST_NAME VARCHAR(150);
    DECLARE    J_V_STUDENT_NOTIFICATION_ID VARCHAR(150) ;
    DECLARE    J_V_STUDENT_ADDRESS JSON ;
    DECLARE    J_V_STUDENT_CONTACTNO JSON ;
    DECLARE    J_V_STUDENT_PRIMARY_CONTACTNO VARCHAR(150) ;
    DECLARE    J_V_IS_ENROLLED INT;
    DECLARE    J_V_BRANCH_ID INT;
#GUARDIAN 
    DECLARE    J_V_GUARDIAN_LOGIN VARCHAR(150) ;
    DECLARE    J_V_GUARDIAN_LOGIN_PASSWORD VARCHAR(250);
    DECLARE    J_V_GUARDIAN_FIRST_NAME VARCHAR(150);
    DECLARE    J_V_GUARDIAN_MIDDLE_NAME VARCHAR(150);
    DECLARE    J_V_GUARDIAN_LAST_NAME VARCHAR(150) ;
    DECLARE    J_V_GUARDIAN_NOTIFICATION_ID     VARCHAR(150) ;
    DECLARE    J_V_GUARDIAN_ADDRESS JSON ;
    DECLARE    J_V_GUARDIAN_CONTACTNO JSON;
    DECLARE    J_V_GURARDIAN_PRIMARY_CONTACTNO INT;
    DECLARE    J_V_FATHER_FIRST_NAME VARCHAR(150) ;
    DECLARE    J_V_FATHER_MIDDLE_NAME VARCHAR(150) ;
    DECLARE    J_V_FATHER_LAST_NAME VARCHAR(150) ;
    DECLARE    J_V_FATHER_OCCUPATION VARCHAR(150) ;
    DECLARE    J_V_FATHER_QUALIFICATION VARCHAR(150) ;
    DECLARE    J_V_FATHER_ANUAL_INCOME DECIMAL ;
    DECLARE    J_V_FATHER_NOTIFICATION_ID     VARCHAR(150) ;
    DECLARE    J_V_FATHER_ADDRESS JSON;
    DECLARE    J_V_FATHER_CONTACTNO JSON ;
    DECLARE    J_V_FATHER_PRIMARY_CONTACTNO INT;
    DECLARE    J_V_MOTHER_FIRST_NAME VARCHAR(150) ;
    DECLARE    J_V_MOTHER_MIDDLE_NAME VARCHAR(150) ;
    DECLARE    J_V_MOTHER_LAST_NAME VARCHAR(150);
    DECLARE    J_V_MOTHER_OCCUPATION VARCHAR(150) ;
    DECLARE    J_V_MOTHER_QUALIFICATION VARCHAR(150) ;
    DECLARE    J_V_STUDENT_GENDER VARCHAR(2) ;
    DECLARE    J_V_STUDENT_IMAGE_PATH VARCHAR(150) ;
    DECLARE    J_V_MOTHER_ANUAL_INCOME DECIMAL ;
    DECLARE    J_V_MOTHER_NOTIFICATION_ID  VARCHAR(150)  ;
    DECLARE    J_V_MOTHER_ADDRESS JSON  ;
    DECLARE    J_V_MOTHER_CONTACTNO JSON;
    DECLARE     J_V_MOTHER_PRIMARY_CONTACTNO INT;
    DECLARE    J_V_MODIFIED_BY INT;
    DECLARE    J_V_MODIFIED_DATE DATETIME ;
    DECLARE   J_V_STUDENT_ACADEMIC_INSTITUTE VARCHAR(150);
    DECLARE   J_V_STUDENT_DATE_OF_BIRTH DATETIME;
    DECLARE   J_V_STUDENT_QUALIFICATION VARCHAR(150);
    DECLARE   J_V_STUDENT_ID INT;
    #Internal Varialbles 
    DECLARE    V_MODIFIED_BY INT ;
    DECLARE    V_MODIFIED_DATE DATETIME ;
    DECLARE    V_ACTIVE INT;
    DECLARE    V_USERTYPEID_FOR_STUDENT INT;
    DECLARE    V_USERTYPEID_FOR_GUARDIAN INT;
    #OUTPUT ID Variables
    DECLARE    V_USER_ID_FOR_STUDENT INT;
    DECLARE    V_USER_ID_FOR_GUARDIAN INT;
    DECLARE    V_OUT_USER_ID INT;

    DECLARE    V_STUDENT_DETAIL_ID INT;
    DECLARE    V_AUTO_GENERATED_SLOGINID VARCHAR(150);
    DECLARE    V_AUTO_GENERATED_GLOGINID VARCHAR(150);
    DECLARE    V_STUDENT_BRANCH_ID INT;

		SELECT  CUSTOMERID,
		        BRANCHID,
		        LOWER(STUDENT_LOGIN) STUDENT_LOGIN,
		        STUDENT_ROLLNO,
		        STUDENT_LOGIN_PASSWORD,
			STUDENT_FIRST_NAME ,
			STUDENT_MIDDLE_NAME ,
			STUDENT_LAST_NAME ,
			STUDENT_NOTIFICATION_ID ,
			STUDENT_ADDRESS ,
			STUDENT_CONTACTNO ,
			STUDENT_PRIMARY_CONTACTNO,
			ACADEMIC_INSTITUTE_ID,
			STUDENTID,
			STUDENT_QUALIFICATION,
			STUDENT_DATE_OF_BIRTH,
			STUDENT_GENDER,
			STUDENT_IMAGE_PATH,
			IS_ENROLLED ,
			LOWER(GUARDIAN_LOGIN) GUARDIAN_LOGIN,
			GUARDIAN_LOGIN_PASSWORD,
			GUARDIAN_FIRST_NAME ,
			GUARDIAN_MIDDLE_NAME ,
			GUARDIAN_LAST_NAME ,
			GUARDIAN_NOTIFICATION_ID ,
			GUARDIAN_ADDRESS ,
			GUARDIAN_CONTACTNO ,
			GURARDIAN_PRIMARY_CONTACTNO,
		        FATHER_FIRST_NAME ,
			FATHER_MIDDLE_NAME ,
			FATHER_LAST_NAME ,
			FATHER_OCCUPATION ,
			FATHER_QUALIFICATION,
			FATHER_ANUAL_INCOME,
			FATHER_NOTIFICATION_ID ,
			FATHER_ADDRESS ,
			FATHER_CONTACTNO ,
			FATHER_PRIMARY_CONTACTNO,
			MOTHER_FIRST_NAME ,
			MOTHER_MIDDLE_NAME ,
			MOTHER_LAST_NAME ,
			MOTHER_OCCUPATION ,
			MOTHER_QUALIFICATION,
			MOTHER_ANUAL_INCOME ,
			MOTHER_NOTIFICATION_ID  ,
			MOTHER_ADDRESS ,
			MOTHER_CONTACTNO ,
			MOTHER_PRIMARY_CONTACTNO,
			MODIFIED_BY,
			MODIFIED_DATE
			INTO 
			J_V_CUSTOMERID,
			J_V_BRANCH_ID,
			J_V_STUDENT_LOGIN ,
			J_V_STUDENT_ROLLNO,
			J_V_STUDENT_LOGIN_PASSWORD,
			J_V_STUDENT_FIRST_NAME ,
			J_V_STUDENT_MIDDLE_NAME ,
			J_V_STUDENT_LAST_NAME ,
			J_V_STUDENT_NOTIFICATION_ID ,
			J_V_STUDENT_ADDRESS ,
			J_V_STUDENT_CONTACTNO ,
			J_V_STUDENT_PRIMARY_CONTACTNO,
			J_V_STUDENT_ACADEMIC_INSTITUTE,
			J_V_STUDENT_ID,
			J_V_STUDENT_QUALIFICATION,
			J_V_STUDENT_DATE_OF_BIRTH,
			J_V_STUDENT_GENDER,
			J_V_STUDENT_IMAGE_PATH,
			J_V_IS_ENROLLED ,
			J_V_GUARDIAN_LOGIN ,
			J_V_GUARDIAN_LOGIN_PASSWORD,
			J_V_GUARDIAN_FIRST_NAME ,
			J_V_GUARDIAN_MIDDLE_NAME ,
			J_V_GUARDIAN_LAST_NAME ,
			J_V_GUARDIAN_NOTIFICATION_ID ,
			J_V_GUARDIAN_ADDRESS ,
			J_V_GUARDIAN_CONTACTNO ,
			J_V_GURARDIAN_PRIMARY_CONTACTNO,
			J_V_FATHER_FIRST_NAME ,
			J_V_FATHER_MIDDLE_NAME ,
			J_V_FATHER_LAST_NAME ,
			J_V_FATHER_OCCUPATION ,
			J_V_FATHER_QUALIFICATION,
			J_V_FATHER_ANUAL_INCOME,
			J_V_FATHER_NOTIFICATION_ID ,
			J_V_FATHER_ADDRESS ,
			J_V_FATHER_CONTACTNO ,
			J_V_FATHER_PRIMARY_CONTACTNO,
			J_V_MOTHER_FIRST_NAME ,
			J_V_MOTHER_MIDDLE_NAME ,
			J_V_MOTHER_LAST_NAME ,
			J_V_MOTHER_OCCUPATION ,
			J_V_MOTHER_QUALIFICATION,
			J_V_MOTHER_ANUAL_INCOME ,
			J_V_MOTHER_NOTIFICATION_ID  ,
			J_V_MOTHER_ADDRESS ,
			J_V_MOTHER_CONTACTNO  ,
			J_V_MOTHER_PRIMARY_CONTACTNO,
			J_V_MODIFIED_BY,
			J_V_MODIFIED_DATE
			FROM
		 JSON_TABLE(P_STUDENT_OBJECT, 
			  '$' COLUMNS (
             CUSTOMERID INT PATH '$.CustomerId' ,
            BRANCHID INT PATH '$.BranchId' ,
            STUDENT_ROLLNO INT PATH '$.RollNo' ,
            MODIFIED_BY INT PATH '$.ModifiedBy' ,
            MODIFIED_DATE DATETIME PATH '$.ModifiedDate' ,
            ACADEMIC_INSTITUTE_ID INT PATH '$.AcademicInstituteId' ,
            STUDENTID INT PATH '$.StudentId' ,
            IS_ENROLLED INT PATH '$.IsEnrolled' ,
            #STUDENT           
            STUDENT_LOGIN VARCHAR(150)  PATH '$.StudentDetails.LoginId',
	    STUDENT_LOGIN_PASSWORD VARCHAR(250)  PATH '$.StudentDetails.Password',
            STUDENT_FIRST_NAME VARCHAR(150) PATH '$.StudentDetails.FirstName',
            STUDENT_MIDDLE_NAME VARCHAR(150) PATH '$.StudentDetails.MiddleName',
            STUDENT_LAST_NAME VARCHAR(150) PATH '$.StudentDetails.LastName', 
            STUDENT_NOTIFICATION_ID VARCHAR(150) PATH '$.StudentDetails.NotificationId', 
            STUDENT_PRIMARY_CONTACTNO VARCHAR(150) PATH '$.StudentDetails.PrimaryContact', 
            STUDENT_DATE_OF_BIRTH DATETIME PATH '$.StudentDetails.DateOfBirth', 
            STUDENT_GENDER VARCHAR(2) PATH '$.StudentDetails.Sex', 
            STUDENT_IMAGE_PATH VARCHAR(150) PATH '$.StudentDetails.ImageName', 
            STUDENT_ADDRESS JSON PATH '$.StudentDetails.Details.Address' ,
            STUDENT_CONTACTNO VARCHAR(500) PATH '$.StudentDetails.Details.ContactNumber' ,
            STUDENT_QUALIFICATION VARCHAR(150) PATH '$.StudentDetails.Details.Qualification', 
            STUDENT_ANNUAL_INCOME DECIMAL PATH '$.StudentDetails.Details.AnnualIncome', 
            STUDENT_OCCUPATION VARCHAR(150) PATH '$.StudentDetails.Details.Occupation',
            #FATHER
            FATHER_FIRST_NAME VARCHAR(150) PATH '$.StudentDetails.Father.FirstName',
            FATHER_MIDDLE_NAME VARCHAR(150) PATH '$.StudentDetails.Father.MiddleName',
            FATHER_LAST_NAME VARCHAR(150) PATH '$.StudentDetails.Father.LastName',
            FATHER_OCCUPATION VARCHAR(150) PATH '$.StudentDetails.Father.Occupation',
            FATHER_QUALIFICATION VARCHAR(150) PATH '$.StudentDetails.Father.Qualification',
            FATHER_ANUAL_INCOME DECIMAL PATH '$.StudentDetails.Father.AnnualIncome',
            FATHER_PRIMARY_CONTACTNO INT PATH '$.StudentDetails.Father.PrimaryContact' , 
            FATHER_NOTIFICATION_ID     VARCHAR(150) PATH '$.StudentDetails.Father.NotificationId',
            FATHER_ADDRESS JSON PATH '$.StudentDetails.Father.Address' ,
            FATHER_CONTACTNO JSON PATH '$.StudentDetails.Father.ContactNumber' ,
            FATHER_PRIMARY_NO INT PATH '$.StudentDetails.Father.PrimaryContact' ,
            #MOTHER
            MOTHER_FIRST_NAME VARCHAR(150) PATH '$.StudentDetails.Mother.FirstName',
            MOTHER_MIDDLE_NAME VARCHAR(150) PATH '$.StudentDetails.Mother.MiddleName',
            MOTHER_LAST_NAME VARCHAR(150) PATH '$.StudentDetails.Mother.LastName',
            MOTHER_OCCUPATION VARCHAR(150) PATH '$.StudentDetails.Mother.Occupation',
            MOTHER_QUALIFICATION VARCHAR(150) PATH '$.StudentDetails.Mother.Qualification',
            MOTHER_ANUAL_INCOME DECIMAL PATH '$.StudentDetails.Mother.AnnualIncome',
            MOTHER_NOTIFICATION_ID     VARCHAR(150) PATH '$.StudentDetails.Mother.NotificationId',
            MOTHER_ADDRESS JSON PATH '$.StudentDetails.Mother.Address' ,
            MOTHER_CONTACTNO JSON PATH '$.StudentDetails.Mother.ContactNumber' ,
            MOTHER_PRIMARY_CONTACTNO INT PATH '$.StudentDetails.Mother.PrimaryContact' ,
            #GUARDIAN 
            GUARDIAN_LOGIN VARCHAR(150)  PATH '$.GuardianDetails.LoginId',
            GUARDIAN_LOGIN_PASSWORD VARCHAR(250)  PATH '$.GuardianDetails.Password',
            GUARDIAN_FIRST_NAME VARCHAR(150) PATH '$.GuardianDetails.FirstName',
            GUARDIAN_MIDDLE_NAME VARCHAR(150) PATH '$.GuardianDetails.MiddleName',
            GUARDIAN_LAST_NAME VARCHAR(150) PATH '$.GuardianDetails.LastName',
            GUARDIAN_NOTIFICATION_ID     VARCHAR(150) PATH '$.GuardianDetails.NotificationId',
            GURARDIAN_PRIMARY_CONTACTNO INT PATH '$.GuardianDetails.PrimaryContact',   
            GURARDIAN_DATE_OF_BIRTH DATETIME PATH '$.GuardianDetails.DateOfBirth',              
            GURARDIAN_GENDER VARCHAR(4) PATH '$.GuardianDetails.Sex',              
            GUARDIAN_IMAGE VARCHAR(150) PATH '$.GuardianDetails.ImageName' ,                   
            GUARDIAN_ADDRESS JSON PATH '$.GuardianDetails.Details.Address' ,
            GUARDIAN_CONTACTNO JSON PATH '$.GuardianDetails.Details.ContactNumber' ,
            GUARDIAN_QUALIFICATION VARCHAR(150) PATH '$.GuardianDetails.Details.Qualification' , 
            GUARDIAN_ANNUAL_INCOME VARCHAR(150) PATH '$.GuardianDetails.Details.AnnualIncome' , 
            GUARDIAN_OCCUPATION VARCHAR(150) PATH '$.GuardianDetails.Details.Occupation' 
            
							
						   )
				 ) STUDENT_DETAILS;
				  SET autocommit = 0;
START TRANSACTION;
SET V_ACTIVE=1;

    #First Student is exits or not if not exists then create user first
   
		CALL SP_UPDATE_STUDENT(
		 J_V_STUDENT_ID ,
		 J_V_STUDENT_ROLLNO  ,
		 J_V_IS_ENROLLED,
		 V_ACTIVE ,
		 J_V_MODIFIED_BY,
		 J_V_MODIFIED_DATE 
		);
			


     CALL  SP_UPDATE_STUDENT_DETAILS(
J_V_STUDENT_ID ,
J_V_STUDENT_ACADEMIC_INSTITUE_ID ,
J_V_STUDENT_IMAGE_PATH,
J_V_FATHER_FIRST_NAME ,
J_V_FATHER_MIDDLE_NAME ,
J_V_FATHER_LAST_NAME ,
J_V_FATHER_CONTACTNO ,
      J_V_FATHER_ANUAL_INCOME ,
J_V_FATHER_QUALIFICATION ,
J_V_FATHER_OCCUPATION ,
J_V_MOTHER_FIRST_NAME ,
J_V_MOTHER_MIDDLE_NAME ,
J_V_MOTHER_LAST_NAME ,
J_V_MOTHER_QUALIFICATION ,
J_V_MOTHER_OCCUPATION ,
J_V_MOTHER_CONTACTNO ,
      J_V_MOTHER_ANUAL_INCOME ,
J_V_DATE_OF_BIRTH  ,
J_V_QUALIFICATION,
J_V_MODIFIED_BY ,
J_V_MODIFIED_DATE  
);
		
 
  
    
COMMIT;
    
  
       
	END */$$
DELIMITER ;

/* Procedure structure for procedure `SP_CREATE_ADMISSION` */

/*!50003 DROP PROCEDURE IF EXISTS  `SP_CREATE_ADMISSION` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `SP_CREATE_ADMISSION`(IN P_STUDENT_OBJECT JSON,
OUT P_OUT_FLAG VARCHAR(50)  
    )
BEGIN
#STUDENT

     DECLARE    J_V_STUDENTID INT;
     DECLARE    J_V_BRANCH_ID INT;
     DECLARE     J_V_ACADEMIC_YEARID     INT             ;
     DECLARE    J_V_DATE_OF_ADMISSION    DATETIME            ;
     DECLARE      J_V_ADMISSION_TYPEID    INT             ;
     DECLARE     J_V_CREATED_DATE        DATETIME           ;
     DECLARE    J_V_CREATED_BY            INT           ;
     DECLARE    V_OUT_STUDENT_ADMISSION_DETAILID INT;
     DECLARE V_ACTIVE INT;
     DECLARE V_OUT_STUDENT_COURSE_ID INT;
     DECLARE    J_V_BRANCH_COURSES_ID     INT ;
	DECLARE  J_V_COURSE_FEE_AMOUNT    DECIMAL ;
	DECLARE  J_V_DISCOUNT_ALLOWED       INT ;
	DECLARE  J_V_DISCOUNTED_FEE_AMOUNT  DECIMAL ;
	DECLARE  J_V_TOTAL_PAID_AMOUNT      DECIMAL;
	DECLARE  J_V_ADDITIONAL_FEES      DECIMAL;
	DECLARE  J_V_INSTALLMENT_TYPE       INT ;
	DECLARE  J_V_INSTALLMENT_START_DATE  DATETIME ;
	DECLARE  J_V_NO_OF_INSTALLMENT       INT;
	DECLARE  J_V_REMARKS                VARCHAR(500);
  
    DECLARE    V_STUDENT_BRANCH_ID INT;

		SELECT  STUDENTID,
		        BRANCHID,
			ACADEMIC_YEARID,
			DATE_OF_ADMISSION,
			ADMISSION_TYPEID,
			CREATED_DATE,
			CREATED_BY,
			BRANCH_COURSES_ID          ,
			COURSE_FEE_AMOUNT       ,
			DISCOUNT_ALLOWED       ,
			DISCOUNTED_FEE_AMOUNT ,
			TOTAL_PAID_AMOUNT     ,
			ADDITIONAL_FEES      ,
			INSTALLMENT_TYPE       ,
			INSTALLMENT_START_DATE ,
			NO_OF_INSTALLMENT        ,
			REMARKS                
			INTO 
			J_V_STUDENTID,
			J_V_BRANCH_ID,
			J_V_ACADEMIC_YEARID,
			 J_V_DATE_OF_ADMISSION,
			 J_V_ADMISSION_TYPEID,
			 J_V_CREATED_DATE,
			 J_V_CREATED_BY,
        	J_V_BRANCH_COURSES_ID     ,
			J_V_COURSE_FEE_AMOUNT        ,
			J_V_DISCOUNT_ALLOWED     ,
			J_V_DISCOUNTED_FEE_AMOUNT  ,
			J_V_TOTAL_PAID_AMOUNT    ,
			J_V_ADDITIONAL_FEES      ,
			J_V_INSTALLMENT_TYPE     ,
			J_V_INSTALLMENT_START_DATE   ,
			J_V_NO_OF_INSTALLMENT       ,
			J_V_REMARKS                
			
			FROM
		 JSON_TABLE(P_STUDENT_OBJECT, 
			  '$' COLUMNS (
             STUDENTID INT PATH '$.StudentId' ,
            BRANCHID INT PATH '$.BranchId' ,
            ACADEMIC_YEARID INT PATH '$.AcedemicYearId' ,
            DATE_OF_ADMISSION INT PATH '$.DateOfAdmission' ,
            ADMISSION_TYPEID INT PATH '$.AdmissionTypeId' ,
            CREATED_DATE  DATETIME PATH '$.CreatedDate' ,
            CREATED_BY INT PATH '$.CreatedBy' ,
     		BRANCH_COURSES_ID     INT PATH '$.BranchCourseId'     ,
			COURSE_FEE_AMOUNT    DECIMAL PATH '$.CourseFeeAmount'      ,
			DISCOUNT_ALLOWED       INT PATH   '$.DiscountAllowed' ,
			DISCOUNTED_FEE_AMOUNT  DECIMAL PATH  '$.DiscountFeeAmount'  ,
			TOTAL_PAID_AMOUNT      DECIMAL PATH  '$.TotalPaidAmount' ,
			ADDITIONAL_FEES      DECIMAL PATH    '$.AdditionalFee'  ,
			INSTALLMENT_TYPE       INT PATH    '$.InstallmentType' ,
			INSTALLMENT_START_DATE  DATETIME PATH  '$.InstallmentDate' ,
			NO_OF_INSTALLMENT       INT PATH    '$.NoOfInstallment'  ,
			REMARKS                VARCHAR(500) PATH     '$.Remarks'            
            
            
 )
				 ) STUDENT_DETAILS;
				  SET autocommit = 0;
START TRANSACTION;
SET V_ACTIVE=1;


    #First Student is exits or not if not exists then create user first
    
    
			 
			   CALL SP_INSERT_ADMISSION_DETAILS(
					  J_V_STUDENT_ID                       ,
					  J_V_BRANCH_ID                        ,
					  J_V_ACADEMIC_YEARID                  ,
					 J_V_DATE_OF_ADMISSION                ,
					  J_V_ADMISSION_TYPEID                 ,
					  J_V_CREATED_DATE                     ,
					  J_V_CREATED_BY                       ,
					v_OUT_STUDENT_ADMISSION_DETAILID   );
					
        
					 CALL   SP_INSERT_STUDENT_COURSES(
				J_V_STUDENT_ID                 ,
				v_OUT_STUDENT_ADMISSION_DETAILID   ,
				J_V_BRANCH_COURSES_ID          ,
				J_V_COURSE_FEE_AMOUNT          ,
				J_V_DISCOUNT_ALLOWED           ,
				J_V_DISCOUNTED_FEE_AMOUNT      ,
				J_V_TOTAL_PAID_AMOUNT          ,
				J_V_ADDITIONAL_FEES            ,
				J_V_INSTALLMENT_TYPE           ,
				J_V_INSTALLMENT_START_DATE     ,
				J_V_NO_OF_INSTALLMENT          ,
				J_V_REMARKS                    ,
				V_ACTIVE                    ,
				J_V_CREATED_DATE               ,
						V_OUT_STUDENT_COURSE_ID      );

    
    SET P_OUT_FLAG=1;
       
	END */$$
DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
